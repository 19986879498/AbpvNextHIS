CREATE OR REPLACE PACKAGE body ZJHIS.PKG_ZHYY_MZ IS

  --绑定卡
  PROCEDURE PRC_OutpPatMedCardCheck(cardType   IN VARCHAR2,
                                    cardWord   IN VARCHAR2,
                                    ReturnCode out integer,
                                    data       out cc_cursor,
                                    ErrorMsg   out VARCHAR2) is
    countNum integer;
  begin
    if cardWord is null or cardWord = '' then
      ReturnCode := -1;
      ErrorMsg   := '卡号不能为空!';
      return;
    end if;
    select count(*)
      into countNum
      from fin_opb_accountcard a
     where a.markno = cardWord;
    --身份证
    if cardType = '1' then
      open data for
        select o.is_valid "status",
               o.card_no "patientId",
               o.name "patientName",
               o.card_no "cardNo",
               o.idenno "idCardNo",
               trim(decode(o.linkman_tel, '', o.home_tel, o.linkman_tel)) "phone",
               o.home "address"
          from com_patientinfo o
         where o.idenno = cardWord
           and o.CARD_NO not like 'T%'
           and o.FEE_KIND IS NULL;
    end if;
    --就诊卡
    if cardType = '2' then
      open data for
        select o.is_valid "status",
               o.card_no "patientId",
               o.name "patientName",
               o.card_no "cardNo",
               o.idenno "idCardNo",
               trim(decode(o.linkman_tel, '', o.home_tel, o.linkman_tel)) "phone",
               o.home "address"
          from com_patientinfo o
         where o.card_no = cardWord
           and o.CARD_NO not like 'T%';
    end if;
    --手机号
    if cardType = '3' then
      open data for
        select o.is_valid "status",
               o.card_no "patientId",
               o.name "patientName",
               o.card_no "cardNo",
               o.idenno "idCardNo",
               trim(decode(o.linkman_tel, '', o.home_tel, o.linkman_tel)) "phone",
               o.home "address"
          from com_patientinfo o
         where (o.home_tel = cardWord or o.work_tel = cardWord)
           and o.CARD_NO not like 'T%'
					 AND o.FEE_KIND IS NULL;
    else
      ReturnCode := -1;
      ErrorMsg   := '不支持该卡的类别!';
    end if;
    if countNum > 0 then
      ReturnCode := 1;
      ErrorMsg   := '已发卡-不能发卡!';
      return;
    end if;
  
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  
  end PRC_OutpPatMedCardCheck;

  --办卡
  PROCEDURE PRC_OutpPatMedCardSell(idCardNo    in varchar2,
                                   patientName IN VARCHAR2,
                                   sex         IN VARCHAR2,
                                   birthday    IN VARCHAR2,
                                   address     IN VARCHAR2,
                                   phone       IN VARCHAR2,
                                   mz          in varchar2,
                                   data        out cc_cursor,
                                   ReturnCode  out integer,
                                   ErrorMsg    out VARCHAR2) is
    v_cardNo     varchar2(10);
    v_markNo     varchar2(10);
    v_cardAccard varchar2(9);
    cnt          integer;
    v_brith      date;
    v_Sex        varchar2(1);
    vs_accountno varchar2(10);
    v_mz         varchar(20);
    v_phone      varchar2(20);
  begin
    if patientName is null or patientName = '' then
      ReturnCode := -1;
      ErrorMsg   := '患者姓名不能为空!';
      return;
    end if;
    if sex is null or sex = '' then
      ReturnCode := -1;
      ErrorMsg   := '患者性别不能为空!';
      return;
    end if;
    if idCardNo is null or idCardNo = '' then
      ReturnCode := -1;
      ErrorMsg   := '证件号码不能为空!';
      return;
    end if;
    if address is null or address = '' then
      ReturnCode := -1;
      ErrorMsg   := '住址不能为空!';
      return;
    end if;
    if phone is null or phone = '' then
      ReturnCode := -1;
      ErrorMsg   := '手机号码不能为空!';
      return;
    else
      v_phone := phone;
    end if;
    if mz is null or mz = '' then
      select c.code
        into v_mz
        from com_dictionary c
       where c.name like '%汉%'
         and c.type = 'NATION';
    else
      select c.code
        into v_mz
        from com_dictionary c
       where c.name = mz
         and c.type = 'NATION';
    
    end if;
    /* EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ReturnCode := -1;
      ErrorMsg   := '找不到民族信息!';
      ROLLBACK;
      RETURN;
    WHEN OTHERS THEN
      ReturnCode := -1;
      ErrorMsg   := '查询民族信息出错!' || SQLERRM;
      ROLLBACK;
      RETURN;*/
    /*  v_markNo := substr(CardNO,-10,length(CardNO));*/
    select SEQ_OPB_AUTOCARDNO.Nextval into v_cardAccard from dual;
    v_markNo := lpad(v_cardAccard, 10, '0');
    select count(*)
      into cnt
      from fin_opb_accountcard aa
     where aa.markno = v_markNo;
    if cnt > 0 then
      ReturnCode := -1;
      ErrorMsg   := '操作失败！卡号重复' || SQLERRM;
      return;
    end if;
    v_cardNo := lpad(v_cardAccard, 10, '0');
    v_brith  := to_date(birthday, 'yyyy-mm-dd');
    if sex = '1' then
      v_Sex := 'M';
    elsif sex = '2' then
      v_Sex := 'F';
    else
      v_Sex := 'U';
    end if;
    select SEQ_FIN_OPB_ACCOUNTNO.Nextval into vs_accountno from dual;
    begin
      insert into fin_opb_accountcard
        (card_no, markno, type, state, bankcode, idno)
      values
        (v_cardNo, v_markNo, '1', '1', '', idCardNo);
    
      insert into com_patientinfo
        (CARD_NO,
         NAME,
         BIRTHDAY,
         IDENNO,
         NATION_CODE,
         PAYKIND_CODE,
         PAYKIND_NAME,
         PACT_CODE,
         PACT_NAME,
         SEX_CODE,
         HOME,
         HOME_TEL,
         OPER_CODE,
         OPER_DATE,
         linkman_tel)
      values
        (v_cardNo,
         patientName,
         v_brith,
         idCardNo,
         v_mz,
         '01',
         '自费',
         '1',
         '自费',
         v_Sex,
         address,
         v_phone,
         '006688',
         sysdate,
         v_phone);
    
      /*   insert into fin_opb_account
        (account_no,
         card_no,
         state,
         vacancy,
         password,
         daylimit,
         is_empower)
      values
        (vs_accountno, v_cardNo, '1', 0, '24680=', 0, '0');*/
    
      INSERT INTO fin_opb_accountrecord
        (SEQUENCE_NO, --交易流水号
         card_no, --病历卡号
         opertype, --操作类型0预交金1建帐户2停帐户3重启帐户4支付5退费入户
         money, --金额
         dept_code, --相关科室
         oper_code, --操作员
         oper_date, --操作时间
         remark, --备注
         valid, --是否有效0有效1无效
         vacancy, --交易后余额
         account_no, --帐号
         EMPOWER_CARDNO, --授权门诊卡号
         empower_name, --被授权人姓名
         name, --授权人姓名
         EMPOWER_COST, --授权金额
         INVOICE_TYPE) --发票类型
      VALUES
        (SEQ_FIN_OPB_ACCOUNTRECORD.Nextval, --交易流水号
         v_cardNo, --病历卡号
         '1', --操作类型0预交金1建帐户2停帐户3重启帐户4支付5退费入户
         0, --金额
         '', --相关科室
         '006688', --操作员
         sysdate, --操作时间
         '', --备注
         '1', --是否有效0有效1无效
         0, --交易后余额
         vs_accountno, --帐号
         '', --授权门诊卡号
         '', --被授权人姓名
         '', --授权人姓名
         0, --授权金额
         ''); --发票类型
    
    Exception
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '发卡失败!' || SQLERRM;
        rollback;
        RETURN;
    end;
    commit;
    open data for
      select o.is_valid    "status",
             o.card_no     "patientId",
             o.name        "patientName",
             o.card_no     "cardNo",
             o.idenno      "idCardNo",
             o.linkman_tel "phone",
             o.home        "address"
        from com_patientinfo o
       where o.card_no = v_cardNo;
    ReturnCode := 1;
    ErrorMsg   := '办卡成功!';
  end PRC_OutpPatMedCardSell;

  --获取医生列表
  PROCEDURE PRC_OutpDoctorQuery(deptId     IN VARCHAR2,
                                Docdate    IN VARCHAR2,
                                hospitalId IN VARCHAR2,
                                ResultSet  out cc_cursor,
                                ReturnCode out integer,
                                ErrorMsg   out VARCHAR2) is
    DeptCode varchar2(20);
    DocTime  date;
  begin
  
    if deptId is null or deptId = '' then
      DeptCode := 'ALL';
    else
      DeptCode := deptId;
    end if;
  
    if Docdate is null or Docdate = '' then
      DocTime := to_date(sysdate, 'yyyy-mm-dd');
    else
      DocTime := to_date(Docdate, 'yyyy-mm-dd');
    end if;
  
    open ResultSet for
      select b.doct_name "doctorName",
             b.doct_code "doctorId",
             (select name
                from com_dictionary
               where code = (select e.POSI_CODE
                               from com_employee e
                              where e.empl_code = b.doct_code)
                 and type = 'POSITION') "title",
             (select name
                from com_dictionary
               where code = (select e.levl_code
                               from com_employee e
                              where e.empl_code = b.doct_code)
                 and type = 'LEVEL') "major",
             fun_get_dept_name(b.dept_code) "deptName",
             b.dept_code "deptId",
             '' "appraise",
             '' "goodAt",
             '' "userPhoto",
             '' "subHospitalID",
             b.id "scheduleId",
             to_char(b.see_date, 'yyyy-mm-dd') "outpDate",
             b.noon_code "timeInterval",
             '' "level",
             (select d.DEPT_ADDRESS
                from COM_DEPARTMENT d
               where d.DEPT_CODE = b.DEPT_CODE) "location",
             '' "sectionType",
             '' "doctorDes",
             b.REGLEVL_CODE "clinicTypeId",
             b.REGLEVL_NAME "clinicTypeName",
             (select a.CHCK_FEE + a.DIAG_FEE
                from FIN_OPR_REGFEEONPACT a
               where a.PACT_CODE = '01'
                 and a.REGLEVL_CODE = b.REGLEVL_CODE) "clinicFee", --诊查费
             (select a.REG_FEE
                from FIN_OPR_REGFEEONPACT a
               where a.PACT_CODE = '01'
                 and a.REGLEVL_CODE = b.REGLEVL_CODE) "registrationFee", --挂号费
             to_char(b.reg_lmt) "registrationLimit", --限号数
             to_char(b.tel_lmt) "reserveLimit", --限预约号数
             to_char(b.reged) "registrationNum", --已挂数
             to_char(b.tel_reging) "reserveNum", --已约数
             b.valid_flag "validFlag", --停号标志 -1 停诊 0 未发布 1正常
             '' "stopFlag", --停诊类别1 停诊后有替诊医生 2 停诊后无替诊医生
             b.reason_name "stopReason", --停诊原因
             '' "doctorCode2", --替诊医生
             '' "doctorCodeName2", --替诊医生名称
             (select count(*)
                from fin_opr_register_pool a
               where a.SCHEMA_ID = b.id
                 and a.begin_time >= sysdate /*where c.SEE_DATE = to_char(DocTime, 'yyyy-mm-dd'))*/
                 and a.POOLNO_TYPE = '1'
                 and a.STATUS = '1') "PreCount"
        from fin_opr_schema b
       where (b.dept_code = DeptCode or 'ALL' = DeptCode)
         and b.valid_flag = '1'
         and b.see_date = DocTime;
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  end PRC_OutpDoctorQuery;

  --获取医院科目列表以及科室

  PROCEDURE PRC_OutpRegisterDeptQuery(ResultSet  out cc_cursor,
                                      ReturnCode out integer,
                                      ErrorMsg   out VARCHAR2) is
  begin
    open ResultSet for
      select b.INPUT_CODE "subjectId",
             b.MARK       as "subjectName",
             a.DEPT_CODE  as "DeptId",
             a.DEPT_NAME  as "deptName"
        from COM_DICTIONARY b, COM_DEPARTMENT a
       where b.TYPE = 'DEPTOWN'
         and b.CODE = a.DEPT_CODE;
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  
  end PRC_OutpRegisterDeptQuery;

  --获得医生某天排班序号
  PROCEDURE PRC_OutpDoctorQueryBySortId(shemaId    IN VARCHAR2,
                                        ResultSet  out cc_cursor,
                                        ReturnCode out integer,
                                        ErrorMsg   out VARCHAR2) is
    DocCode varchar2(20);
    DocTime date;
    v_Count integer;
  begin
  
    if shemaId is null or shemaId = '' then
      ReturnCode := -1;
      ErrorMsg   := '排班id不能为空!';
      return;
    end if;
    /* select count(*)
    into v_Count
    from fin_opr_register_pool b
       where b.SCHEMA_ID = shemaId
         and b.begin_time >= sysdate \*where c.SEE_DATE = to_char(DocTime, 'yyyy-mm-dd'))*\
         and b.POOLNO_TYPE = '1'
         and b.STATUS = '1';*/
    open ResultSet for
      select b.POOL_ID "poolId", --号源池id
             b.SCHEMA_ID "schemaId", --排班ID
             b.serialno "orderId", --序号ID*
             '第' || b.SERIALNO || '号' "orderName", --序号名称
             1 "appointmentCount", --剩余挂号数
             to_char(b.begin_time, 'yyyy-mm-dd hh24:mi:ss') || '到' ||
             to_char(b.end_time, 'yyyy-mm-dd hh24:mi:ss') "orderDuration", --就诊序号时间段
             (select count(*)
                from fin_opr_register_pool b
               where b.SCHEMA_ID = shemaId
                 and b.begin_time >= sysdate /*where c.SEE_DATE = to_char(DocTime, 'yyyy-mm-dd'))*/
                 and b.POOLNO_TYPE = '1'
                 and b.STATUS = '1') "PreCount"
        from fin_opr_register_pool b
       where b.SCHEMA_ID = shemaId
         and b.begin_time >= sysdate /*where c.SEE_DATE = to_char(DocTime, 'yyyy-mm-dd'))*/
         and b.POOLNO_TYPE = '1'
         and b.STATUS = '1';
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  end PRC_OutpDoctorQueryBySortId;

  --挂号锁定号

  PROCEDURE PRC_OutpRegisterLock(patientId        IN VARCHAR2, --患者id
                                 appointmentType  IN VARCHAR2, --appointmentType 挂号类别代码
                                 shemaId          in VARCHAR2, --排班ID
                                 poolId           in VARCHAR2, --分时ID
                                 doctorId         IN VARCHAR2, --doctorId医生id
                                 deptName         IN VARCHAR2, --deptID科室编码
                                 appointmentOrder IN VARCHAR2, -- 就诊序号
                                 appointmentTime  IN date, --就诊时间：2020年6月20日下午
                                 lockTime         IN date, --锁号时间默认为系统时间
                                 lockState        in VARCHAR2, --1锁号
                                 ResultSet        out cc_cursor,
                                 ReturnCode       out integer,
                                 ErrorMsg         out VARCHAR2) is
    p_isreged     varchar2(1); --当前状态  0作废  1未占   2已占
    p_isregCount  integer; --当前排班已挂数量
    P_outRecId    varchar2(10);
    v_payStatus   varchar2(1); --支付状态
    v_patientinfo COM_PATIENTINFO%ROWTYPE;
  
  begin
    if patientId is null or patientId = '' then
      ReturnCode := -1;
      ErrorMsg   := '患者ID不能为空!';
      return;
    end if;
    if appointmentType is null or appointmentType = '' then
      ReturnCode := -1;
      ErrorMsg   := '挂号类别代码不能为空!';
      return;
    end if;
    if shemaId is null or shemaId = '' then
      ReturnCode := -1;
      ErrorMsg   := '排班ID不能为空!';
      return;
    end if;
    if poolId is null or poolId = '' then
      ReturnCode := -1;
      ErrorMsg   := '分时ID不能为空!';
      return;
    end if;
    if lockState is null or lockState = '' then
      ReturnCode := -1;
      ErrorMsg   := '锁号类型不能为空!';
      return;
    end if;
    if lockState = '1' then
      --锁号
      begin
        select status
          into p_isreged
          from fin_opr_register_pool t
         where t.pool_id = poolId
           for update;
        if p_isreged = '0' then
          ReturnCode := -1;
          ErrorMsg   := '当前号已被作废不可操作!';
          rollback;
          return;
        elsif p_isreged = '1' then
          begin
            --查询是否已有预约信息
            select count(rec_id)
              into p_isregCount
              from fin_opr_preregister t
             where t.schema_id = shemaId
               AND t.card_no = patientId
               and t.pretype = '1'
               and t.status != '4'
               and t.status != '0';
          
            if p_isregCount > 0 then
              ReturnCode := -1;
              ErrorMsg   := '当前人员已有该排班预约信息,不可重复预约!';
              rollback;
              return;
            end if;
            --锁定号码池
            update fin_opr_register_pool t
               set t.status = '2'
             where t.pool_id = poolId;
          
            --生成预约记录ID
            select seq_fin_opr_preregister.Nextval
              into P_outRecId
              from dual;
            select *
              into v_patientinfo
              from COM_PATIENTINFO b
             where b.CARD_NO = patientId;
            --新增预约记录
            insert into fin_opr_preregister
              (rec_id,
               schema_id,
               pool_id,
               PatientName,
               idCard,
               sex,
               birthday,
               mobile,
               card_no,
               oper_date,
               orderno,
               reserversource,
               preType,
               status)
            values
              (P_outRecId,
               shemaId,
               poolId,
               v_patientinfo.NAME,
               v_patientinfo.IDENNO,
               v_patientinfo.SEX_CODE,
               v_patientinfo.BIRTHDAY,
               v_patientinfo.HOME_TEL,
               v_patientinfo.CARD_NO,
               sysdate,
               '',
               'ZHYY',
               '1', --preType
               '1' --状态
               );
            --修改排班表电话已预约数量
            update fin_opr_schema
               set tel_reging = tel_reging + 1
             where id = shemaId;
            open ResultSet for
              select P_outRecId as "hisOrderNO",
                     appointmentOrder as "serialNo",
                     (select f.DEPT_ADDRESS
                        from COM_DEPARTMENT f
                       where f.DEPT_CODE = deptName) as "location"
                from dual;
            ReturnCode := 1;
            ErrorMsg   := '锁号成功!';
          end;
        elsif p_isreged = '2' then
          ReturnCode := -1;
          ErrorMsg   := '当前号段已经被锁定，请更换预约时间';
          rollback;
          return;
        end if;
      EXCEPTION
        WHEN OTHERS THEN
          ReturnCode := -1;
          ErrorMsg   := '占用挂号池表FIN_OPR_REGISTER_POOL号子失败' || SQLERRM;
          rollback;
          return;
      end;
    end if;
    commit;
  end PRC_OutpRegisterLock;

  PROCEDURE PRC_RegisterAddQuery(CardNo     IN VARCHAR2,
                                 ResultSet  out cc_cursor,
                                 ReturnCode out integer,
                                 ErrorMsg   out VARCHAR2) is
  
  begin
    if CardNo is null or CardNo = '' then
      ReturnCode := -1;
      ErrorMsg   := '就诊卡号不得为空' || sqlerrm;
      return;
    end if;
  
    open ResultSet for
      select b.card_no "card_no", --卡号
             b.reg_date "reg_date", --挂号日期
             b.reglevl_name "reglevl", --挂号级别*
             (select r.reg_fee + r.chck_fee + r.diag_fee
                from fin_opr_regfeeonpact r
               where r.reglevl_code = b.reglevl_code
                 and r.pact_code = '01') "RegFee", --剩余挂号数
             b.dept_name "deptName", --挂号科室
             b.doct_name "docName", --挂号医生
             b.rec_id "id"
        from fin_opr_registeradd b
       where b.card_no = CardNo
         and b.reg_date >= sysdate - 1
         and b.state = '1';
  
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  end PRC_RegisterAddQuery;

  procedure PRC_RegisterAddConfirm(appointmentId     IN VARCHAR2, --加号的主键
                                   appointmentStatus IN VARCHAR2,
                                   payStatus         IN VARCHAR2,
                                   total             IN number,
                                   payType           IN VARCHAR2, --支付类型：默认1：微信，2：支付宝3银联
                                   ResultSet         out cc_cursor,
                                   ReturnCode        out integer,
                                   ErrorMsg          out VARCHAR2) is
    v_clincNo      varchar2(10);
    vVisit_no      long;
    vVisitAll_no   long;
    numT           Integer;
    numALLT        Integer;
    vnooncode      varchar2(1);
    vsee_type      varchar2(1);
    v_patientinfo  com_patientinfo%rowtype;
    v_invoiceNo    varchar2(12);
    v_deptlocation varchar2(100);
    PayMode        varchar2(10);
    v_preinfo      Fin_Opr_Registeradd%ROWTYPE;
    v_regCost      NUMBER(10, 2); --挂号费
    v_checkCost    NUMBER(10, 2); --检查费
    v_diagCost     NUMBER(10, 2); --诊查费
  begin
    if appointmentId is null then
      ReturnCode := -1;
      ErrorMsg   := '预约订单ID不能为空!';
      return;
    end if;
    begin
      select *
        into v_preinfo
        from Fin_Opr_Registeradd a
       where a.REC_ID = appointmentId
         and a.state = '1';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ReturnCode := -1;
        ErrorMsg   := '找不到加号信息!';
        RETURN;
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '查找加号信息时出错!' || SQLERRM;
        RETURN;
    end;
    --挂号
    begin
      select *
        into v_patientinfo
        from com_patientinfo a
       where a.card_no = v_preinfo.CARD_NO;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ReturnCode := -1;
        ErrorMsg   := '找不到患者基本信息!';
        RETURN;
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '查找患者基本信息时出错!' || SQLERRM;
        RETURN;
    end;
    begin
      --检查挂号费与his系统的对照
      select a.REG_FEE, a.DIAG_FEE, a.CHCK_FEE
        into v_regCost, v_diagCost, v_checkCost
        from FIN_OPR_REGFEEONPACT a
       where a.PACT_CODE = '01'
         and a.REGLEVL_CODE = v_preinfo.REGLEVL_CODE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ReturnCode := -1;
        ErrorMsg   := '找不到挂号费基本信息!';
        RETURN;
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '查找挂号费基本信息时出错!' || SQLERRM;
        RETURN;
    end;
    if total != v_regCost + v_checkCost + v_diagCost then
      ReturnCode := -1;
      ErrorMsg   := '挂号费与HIS系统查询出的挂号总额不一致!' || SQLERRM;
      RETURN;
    end if;
  
    if to_number(to_char(sysdate, 'hh24')) < 12 then
      vnooncode := '1';
    elsif to_number(to_char(sysdate, 'hh24')) >= 12 and
          to_number(to_char(sysdate, 'hh24')) < 18 then
      vnooncode := '2';
    else
      vnooncode := '3';
    end if;
    SELECT seq_fin_clinicno.nextval into v_clincNo FROM dual;
    if payType = '1' then
      PayMode := 'WX';
    elsif payType = '2' then
      PayMode := 'ZB';
    elsif payType = '3' then
      PayMode := 'CD';
    else
      PayMode := '';
    end if;
    vsee_type := '1';
    select count(*)
      into numT
      from fin_opr_seesequence a --挂号看诊序号表
     WHERE a.see_date = trunc(sysdate)
       AND a.see_type = vsee_type
       AND a.see_subject = v_preinfo.doct_code
       AND a.noon_code = vnooncode;
    select count(*)
      into numALLT
      from fin_opr_seesequence a --挂号看诊序号表
     WHERE a.see_date = trunc(sysdate)
       AND a.see_type = '4'
       AND a.see_subject = 'ALL'
       AND a.noon_code = vnooncode;
    --看诊序号表 记录挂号的次数
    begin
      if numT = 0 then
        insert INTO fin_opr_seesequence --挂号看诊序号表
          (see_date, --看诊日期
           see_type, --看诊类型 1医生，2科室
           see_subject, --看诊科目，包括医生、科室
           reglevl_code, --挂号级别
           current_value, --当前序号
           noon_code) --午别
        VALUES
          (trunc(sysdate), --看诊日期
           vsee_type, --看诊类型 1医生，2科室
           v_preinfo.doct_code, --看诊科目，包括医生、科室
           v_preinfo.reglevl_code, --挂号级别
           '1', --当前序号
           vnooncode);
      else
        UPDATE fin_opr_seesequence --挂号看诊序号表
           SET current_value = current_value + 1 --当前序号
         WHERE see_date = trunc(sysdate)
           AND see_type = vsee_type
           AND see_subject = v_preinfo.doct_code
           AND noon_code = vnooncode;
      end if;
      BEGIN
        SELECT current_value
          into vVisit_no --当前序号
          FROM fin_opr_seesequence --挂号看诊序号表
         WHERE see_date = trunc(sysdate)
           AND see_type = vsee_type
           AND see_subject = v_preinfo.doct_code
           AND noon_code = vnooncode;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '挂号看诊序号表(fin_opr_seesequence)失败!';
          RETURN;
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '检索挂号看诊序号表(fin_opr_seesequence)时出错!' || SQLERRM;
          RETURN;
      END;
      if numALLT = 0 then
        INSERT INTO fin_opr_seesequence --挂号看诊序号表
          (see_date, --看诊日期
           see_type, --看诊类型 1医生，2科室
           see_subject, --看诊科目，包括医生、科室
           reglevl_code, --挂号级别
           current_value, --当前序号
           noon_code) --午别
        VALUES
          (trunc(sysdate), --看诊日期
           '4', --看诊类型 1医生，2科室
           'ALL', --看诊科目，包括医生、科室
           v_preinfo.REGLEVL_CODE, --挂号级别
           '1', --当前序号
           vnooncode);
      else
        UPDATE fin_opr_seesequence --挂号看诊序号表
           SET current_value = current_value + 1 --当前序号
         WHERE see_date = trunc(sysdate)
           AND see_type = '4'
           AND see_subject = 'ALL'
           AND noon_code = vnooncode;
      end if;
      BEGIN
        SELECT current_value
          into vVisitAll_no --当前序号
          FROM fin_opr_seesequence --挂号看诊序号表
         WHERE see_date = trunc(sysdate)
           AND see_type = '4'
           AND see_subject = 'ALL'
           AND noon_code = vnooncode;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := 'vVisitAll_no(fin_opr_seesequence)失败!';
          RETURN;
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '检索vVisitAll_no(fin_opr_seesequence)时出错!' ||
                        SQLERRM;
          RETURN;
      END;
      select seq_fin_opb_invoice.Nextval into v_invoiceNo from dual;
    
      INSERT INTO fin_opr_register a --挂号主表
        (clinic_code, --门诊号/发票号
         card_no, --就诊卡号
         reg_date, --挂号日期
         noon_code, --午别
         name, --姓名
         idenno, --身份证号
         sex_code, --性别
         birthday, --出生日
         paykind_code, --结算类别号
         paykind_name, --结算类别名称
         pact_code, --合同号
         pact_name, --合同单位名称
         mcard_no, --医疗证号
         reglevl_code, --挂号级别
         reglevl_name, --挂号级别名称
         dept_code, --科室号
         dept_name, --科室名称
         seeno, --看诊序号
         doct_code, --医师代号
         doct_name, --医师姓名
         see_date, --看诊日期
         ynregchrg, --挂号收费标志
         ynbook, --是否预约
         ynfr, --1初诊/2复诊
         reg_fee, --挂号费
         chck_fee, --检查费
         diag_fee, --诊察费
         oth_fee, --附加费
         own_cost, --自费金额
         pub_cost, --报销金额
         pay_cost, --自付金额
         valid_flag, --退号标志
         oper_code, --操作员代码
         ynsee, --是否看诊
         check_flag, --1未核查/2已核查
         rela_phone, --联系电话
         address, --地址
         trans_type, --交易类型
         card_type, --证件类型
         begin_time, --开始时间段
         end_time, --结束时间段
         cancel_opcd, --作废人
         cancel_date, --作废时间
         invoice_no,
         recipe_no,
         append_flag,
         order_no,
         schema_no,
         oper_date, --操作时间
         in_source,
         is_sendinhoscase,
         IS_ENCRYPTNAME,
         normalname,
         eco_cost,
         IS_Account,
         account_no,
         rec_id)
      VALUES
        (v_clincNo, --门诊号/发票号
         v_patientinfo.CARD_NO, --就诊卡号
         sysdate, --挂号日期
         vnooncode, --午别
         v_patientinfo.name, --姓名
         v_patientinfo.idenno, --身份证号
         v_patientinfo.sex_code, --性别
         v_patientinfo.birthday, --出生日
         '01', --结算类别号
         '', --结算类别名称
         '01', --合同号
         '自费', --合同单位名称
         '', --医疗证号
         v_preinfo.REGLEVL_CODE, --挂号级别
         v_preinfo.REGLEVL_NAME, --挂号级别名称
         v_preinfo.DEPT_CODE, --科室号
         fun_get_dept_name(v_preinfo.DEPT_CODE), --科室名称
         vVisit_no, --看诊序号
         v_preinfo.DOCT_CODE, --医师代号
         fun_get_empl_name(v_preinfo.DOCT_CODE), --医师姓名
         to_date('0001-01-01', 'yyyy-mm-dd'), --看诊日期
         '1', --挂号收费标志
         '0', --是否预约
         '1', --1初诊/2复诊
         v_regCost, --挂号费
         v_checkCost, --检查费
         v_diagCost, --诊察费
         '0', --附加费
         total, --自费金额
         '0', --报销金额
         '0', --自付金额
         '1', --有效标志
         '006688', --操作员代码
         '0', --是否看诊
         '0', --1未核查/2已核查
         v_patientinfo.linkman_tel, --联系电话
         v_patientinfo.home, --地址
         '1', --交易类型
         '01', --证件类型
         sysdate, --开始时间
         sysdate, --结束时间
         '', --作废人
         to_date('0001-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'),
         v_invoiceNo,
         vVisitAll_no,
         '0',
         '1',
         '',
         sysdate,
         '1',
         '0',
         '0',
         '',
         '0',
         '0',
         '', --账号
         appointmentId);
    
      update Fin_Opr_Registeradd d
         set d.state = '2'
       where d.REC_ID = v_preinfo.REC_ID;
    exception
      when others then
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '挂号操作不成功！' || SQLERRM;
        return;
    end;
    commit;
    open ResultSet for
      select '1' as "status",
             v_invoiceNo as "tiketNo",
             v_clincNo as "clincNo"
        from dual;
    ReturnCode := 1;
    ErrorMsg   := '挂号成功!';
  end PRC_RegisterAddConfirm;

  --挂号确认

  PROCEDURE PRC_OutpRegisterConfirm(appointmentId     IN VARCHAR2, --预约挂号表的主键
                                    appointmentStatus IN VARCHAR2,
                                    payStatus         IN VARCHAR2,
                                    total             IN number,
                                    payType           IN VARCHAR2, --支付类型：默认1：微信，2：支付宝3银联
                                    ResultSet         out cc_cursor,
                                    ReturnCode        out integer,
                                    ErrorMsg          out VARCHAR2) is
    v_clincNo      varchar2(10);
    vVisit_no      long;
    vVisitAll_no   long;
    numT           Integer;
    numALLT        Integer;
    vnooncode      varchar2(1);
    vsee_type      varchar2(1);
    v_patientinfo  com_patientinfo%rowtype;
    v_invoiceNo    varchar2(12);
    v_deptlocation varchar2(100);
    PayMode        varchar2(10);
    v_preinfo      FIN_OPR_PREREGISTER%ROWTYPE;
    v_shemainfo    FIN_OPR_SCHEMA%ROWTYPE;
    v_poolinfo     FIN_OPR_REGISTER_POOL%ROWTYPE;
    v_regCost      NUMBER(10, 2); --挂号费
    v_checkCost    NUMBER(10, 2); --检查费
    v_diagCost     NUMBER(10, 2); --诊查费
  begin
    if appointmentId is null then
      ReturnCode := -1;
      ErrorMsg   := '预约订单ID不能为空!';
      return;
    end if;
    begin
      select *
        into v_preinfo
        from FIN_OPR_PREREGISTER a
       where a.REC_ID = appointmentId;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ReturnCode := -1;
        ErrorMsg   := '找不到锁号信息!';
        RETURN;
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '查找锁号信息时出错!' || SQLERRM;
        RETURN;
    end;
    if appointmentStatus = 0 then
      if v_preinfo.status = '0' then
        --已作废
        ReturnCode := -1;
        ErrorMsg   := '当前号已被作废不可操作!';
        return;
      elsif v_preinfo.status = '1' then
        begin
          --作废预约记录
          update FIN_OPR_PREREGISTER t
             set t.status = '0'
           where t.rec_id = appointmentId;
          --释放号码池
          update fin_opr_register_pool t
             set t.status = '1'
           where t.pool_id = v_preinfo.POOL_ID;
          --修改排班表已预约数量
          update fin_opr_schema
             set tel_reging = tel_reging - 1
           where id = v_preinfo.SCHEMA_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            ReturnCode := -1;
            ErrorMsg   := '找不到消号信息!';
            ROLLBACK;
            RETURN;
          WHEN OTHERS THEN
            ReturnCode := -1;
            ErrorMsg   := '消号时出错!' || SQLERRM;
            ROLLBACK;
            RETURN;
        end;
      elsif v_preinfo.status = '2' then
        ReturnCode := -1;
        ErrorMsg   := '释放挂号池表FIN_OPR_REGISTER_POOL号子失败:已退票';
        return;
      elsif v_preinfo.status = '3' then
        --已取票
        ReturnCode := -1;
        ErrorMsg   := '释放挂号池表FIN_OPR_REGISTER_POOL号子失败:已取票';
        return;
      elsif v_preinfo.status = '4' then
        --已退票
        ReturnCode := -1;
        ErrorMsg   := '释放挂号池表FIN_OPR_REGISTER_POOL号子失败:已退票';
      end if;
      ErrorMsg := '预约已取消！';
    else
      --挂号
      begin
        select *
          into v_patientinfo
          from com_patientinfo a
         where a.card_no = v_preinfo.CARD_NO;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ReturnCode := -1;
          ErrorMsg   := '找不到患者基本信息!';
          RETURN;
        WHEN OTHERS THEN
          ReturnCode := -1;
          ErrorMsg   := '查找患者基本信息时出错!' || SQLERRM;
          RETURN;
      end;
      begin
        select *
          into v_shemainfo
          from FIN_OPR_SCHEMA a
         where a.ID = v_preinfo.SCHEMA_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ReturnCode := -1;
          ErrorMsg   := '找不到排班基本信息!';
          RETURN;
        WHEN OTHERS THEN
          ReturnCode := -1;
          ErrorMsg   := '查找排班基本信息时出错!' || SQLERRM;
          RETURN;
      end;
      begin
        select *
          into v_poolinfo
          from FIN_OPR_REGISTER_POOL a
         where a.POOL_ID = v_preinfo.POOL_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ReturnCode := -1;
          ErrorMsg   := '找不到号源池分时基本信息!';
          RETURN;
        WHEN OTHERS THEN
          ReturnCode := -1;
          ErrorMsg   := '查找号源池分时基本信息时出错!' || SQLERRM;
          RETURN;
      end;
      begin
        --检查挂号费与his系统的对照
        select a.REG_FEE, a.DIAG_FEE, a.CHCK_FEE
          into v_regCost, v_diagCost, v_checkCost
          from FIN_OPR_REGFEEONPACT a
         where a.PACT_CODE = '01'
           and a.REGLEVL_CODE = v_shemainfo.REGLEVL_CODE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ReturnCode := -1;
          ErrorMsg   := '找不到挂号费基本信息!';
          RETURN;
        WHEN OTHERS THEN
          ReturnCode := -1;
          ErrorMsg   := '查找挂号费基本信息时出错!' || SQLERRM;
          RETURN;
      end;
      --70岁以上免挂号费
      if zjhis.fun_get_age_forzhyy(v_patientinfo.birthday) then
        v_regCost := 0;
      end if;
      if total != v_regCost + v_checkCost + v_diagCost then
        ReturnCode := -1;
        ErrorMsg   := '挂号费与HIS系统查询出的挂号总额不一致!' || SQLERRM;
        RETURN;
      end if;
      SELECT seq_fin_clinicno.nextval into v_clincNo FROM dual;
      if payType = '1' then
        PayMode := 'WX';
      elsif payType = '2' then
        PayMode := 'ZB';
      elsif payType = '3' then
        PayMode := 'CD';
      elsif payType = '4' then
        PayMode := 'CA';
      else
        PayMode := '';
      end if;
      vsee_type := '1';
      select count(*)
        into numT
        from fin_opr_seesequence a --挂号看诊序号表
       WHERE a.see_date = v_shemainfo.SEE_DATE
         AND a.see_type = vsee_type
         AND a.see_subject = v_shemainfo.doct_code
         AND a.noon_code = v_shemainfo.NOON_CODE;
      select count(*)
        into numALLT
        from fin_opr_seesequence a --挂号看诊序号表
       WHERE a.see_date = v_shemainfo.SEE_DATE
         AND a.see_type = '4'
         AND a.see_subject = 'ALL'
         AND a.noon_code = v_shemainfo.NOON_CODE;
      --看诊序号表 记录挂号的次数
      begin
        if numT = 0 then
          insert INTO fin_opr_seesequence --挂号看诊序号表
            (see_date, --看诊日期
             see_type, --看诊类型 1医生，2科室
             see_subject, --看诊科目，包括医生、科室
             reglevl_code, --挂号级别
             current_value, --当前序号
             noon_code) --午别
          VALUES
            (v_shemainfo.SEE_DATE, --看诊日期
             vsee_type, --看诊类型 1医生，2科室
             v_shemainfo.doct_code, --看诊科目，包括医生、科室
             v_shemainfo.reglevl_code, --挂号级别
             '1', --当前序号
             v_shemainfo.noon_code);
        else
          UPDATE fin_opr_seesequence --挂号看诊序号表
             SET current_value = current_value + 1 --当前序号
           WHERE see_date = v_shemainfo.SEE_DATE
             AND see_type = vsee_type
             AND see_subject = v_shemainfo.doct_code
             AND noon_code = v_shemainfo.NOON_CODE;
        end if;
        BEGIN
          SELECT current_value
            into vVisit_no --当前序号
            FROM fin_opr_seesequence --挂号看诊序号表
           WHERE see_date = v_shemainfo.SEE_DATE
             AND see_type = vsee_type
             AND see_subject = v_shemainfo.doct_code
             AND noon_code = v_shemainfo.NOON_CODE;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := '挂号看诊序号表(fin_opr_seesequence)失败!';
            RETURN;
          WHEN OTHERS THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := '检索挂号看诊序号表(fin_opr_seesequence)时出错!' || SQLERRM;
            RETURN;
        END;
        if numALLT = 0 then
          INSERT INTO fin_opr_seesequence --挂号看诊序号表
            (see_date, --看诊日期
             see_type, --看诊类型 1医生，2科室
             see_subject, --看诊科目，包括医生、科室
             reglevl_code, --挂号级别
             current_value, --当前序号
             noon_code) --午别
          VALUES
            (v_shemainfo.SEE_DATE, --看诊日期
             '4', --看诊类型 1医生，2科室
             'ALL', --看诊科目，包括医生、科室
             v_shemainfo.REGLEVL_CODE, --挂号级别
             '1', --当前序号
             v_shemainfo.NOON_CODE);
        else
          UPDATE fin_opr_seesequence --挂号看诊序号表
             SET current_value = current_value + 1 --当前序号
           WHERE see_date = v_shemainfo.SEE_DATE
             AND see_type = '4'
             AND see_subject = 'ALL'
             AND noon_code = v_shemainfo.NOON_CODE;
        end if;
        BEGIN
          SELECT current_value
            into vVisitAll_no --当前序号
            FROM fin_opr_seesequence --挂号看诊序号表
           WHERE see_date = v_shemainfo.SEE_DATE
             AND see_type = '4'
             AND see_subject = 'ALL'
             AND noon_code = v_shemainfo.NOON_CODE;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := 'vVisitAll_no(fin_opr_seesequence)失败!';
            RETURN;
          WHEN OTHERS THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := '检索vVisitAll_no(fin_opr_seesequence)时出错!' ||
                          SQLERRM;
            RETURN;
        END;
        select seq_fin_opb_invoice.Nextval into v_invoiceNo from dual;
      
        INSERT INTO fin_opr_register a --挂号主表
          (clinic_code, --门诊号/发票号
           card_no, --就诊卡号
           reg_date, --挂号日期
           noon_code, --午别
           name, --姓名
           idenno, --身份证号
           sex_code, --性别
           birthday, --出生日
           paykind_code, --结算类别号
           paykind_name, --结算类别名称
           pact_code, --合同号
           pact_name, --合同单位名称
           mcard_no, --医疗证号
           reglevl_code, --挂号级别
           reglevl_name, --挂号级别名称
           dept_code, --科室号
           dept_name, --科室名称
           seeno, --看诊序号
           doct_code, --医师代号
           doct_name, --医师姓名
           see_date, --看诊日期
           ynregchrg, --挂号收费标志
           ynbook, --是否预约
           ynfr, --1初诊/2复诊
           reg_fee, --挂号费
           chck_fee, --检查费
           diag_fee, --诊察费
           oth_fee, --附加费
           own_cost, --自费金额
           pub_cost, --报销金额
           pay_cost, --自付金额
           valid_flag, --退号标志
           oper_code, --操作员代码
           ynsee, --是否看诊
           check_flag, --1未核查/2已核查
           rela_phone, --联系电话
           address, --地址
           trans_type, --交易类型
           card_type, --证件类型
           begin_time, --开始时间段
           end_time, --结束时间段
           cancel_opcd, --作废人
           cancel_date, --作废时间
           invoice_no,
           recipe_no,
           append_flag,
           order_no,
           schema_no,
           oper_date, --操作时间
           in_source,
           is_sendinhoscase,
           IS_ENCRYPTNAME,
           normalname,
           eco_cost,
           IS_Account,
           account_no,
           rec_id)
        VALUES
          (v_clincNo, --门诊号/发票号
           v_patientinfo.CARD_NO, --就诊卡号
           v_poolinfo.begin_time, --挂号日期
           v_shemainfo.NOON_CODE, --午别
           v_patientinfo.name, --姓名
           v_patientinfo.idenno, --身份证号
           v_patientinfo.sex_code, --性别
           v_patientinfo.birthday, --出生日
           '01', --结算类别号
           '', --结算类别名称
           '01', --合同号
           '自费', --合同单位名称
           '', --医疗证号
           v_shemainfo.REGLEVL_CODE, --挂号级别
           v_shemainfo.REGLEVL_NAME, --挂号级别名称
           v_shemainfo.DEPT_CODE, --科室号
           fun_get_dept_name(v_shemainfo.DEPT_CODE), --科室名称
           v_poolinfo.SERIALNO, --看诊序号
           v_shemainfo.DOCT_CODE, --医师代号
           fun_get_empl_name(v_shemainfo.DOCT_CODE), --医师姓名
           v_shemainfo.SEE_DATE, --看诊日期
           '1', --挂号收费标志
           '1', --是否预约
           '1', --1初诊/2复诊
           v_regCost, --挂号费
           v_checkCost, --检查费
           v_diagCost, --诊察费
           '0', --附加费
           total, --自费金额
           '0', --报销金额
           '0', --自付金额
           '1', --有效标志
           '006688', --操作员代码
           '0', --是否看诊
           '0', --1未核查/2已核查
           v_patientinfo.linkman_tel, --联系电话
           v_patientinfo.home, --地址
           '1', --交易类型
           '01', --证件类型
           v_poolinfo.BEGIN_TIME, --开始时间
           v_poolinfo.END_TIME, --结束时间
           '', --作废人
           to_date('0001-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'),
           v_invoiceNo,
           vVisitAll_no,
           '0',
           '1',
           v_poolinfo.SCHEMA_ID,
           sysdate,
           '1',
           '0',
           '0',
           '',
           '0',
           '0',
           '', --账号
           appointmentId);
      
        update FIN_OPR_PREREGISTER d
           set d.STATUS = '2'
         where d.REC_ID = v_preinfo.REC_ID;
      exception
        when others then
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '挂号操作不成功！' || SQLERRM;
          return;
      end;
      open ResultSet for
        select '1' as "status",
               v_invoiceNo as "tiketNo",
               v_clincNo as "clincNo"
          from dual;
      ReturnCode := 1;
      ErrorMsg   := '挂号成功!';
    end if;
    commit;
  end PRC_OutpRegisterConfirm;

  --扫码挂号查询
  PROCEDURE PRC_RegisterSMAddQuery(DoctCode   IN VARCHAR2,
                                   ResultSet  out cc_cursor,
                                   ReturnCode out integer,
                                   ErrorMsg   out VARCHAR2) is
  
    countEmpl integer; --查询结果数量
  begin
    if DoctCode is null or DoctCode = '' then
      ReturnCode := -1;
      ErrorMsg   := '医生编号不得为空' || sqlerrm;
      return;
    end if;
  
    select count(*)
      into countEmpl
      from view_user_priv e
     where e.USER_CODE = DoctCode
       and e.DEPT_CODE in (select d.dept_code
                             from com_department d
                            where d.dept_type = 'C'
                              and d.valid_state = '1');
  
    if countEmpl <= 0 then
      ReturnCode := -1;
      ErrorMsg   := '该医生的看诊部门不为门诊' || sqlerrm;
      return;
    end if;
  
    open ResultSet for
      select b.EMPL_CODE "emplcode",
             b.EMPL_NAME "emplname",
             a.DEPT_CODE "deptId",
             fun_get_dept_name(a.DEPT_CODE) "deptName",
             (select z.reg_fee + z.chck_fee + z.diag_fee
                from fin_opr_regfeeonpact z
               where z.pact_code = '01'
                 and z.reglevl_code =
                     decode(b.levl_code, '2', '9', '3', '12', '6')) "total",
             decode(b.levl_code, '2', '9', '3', '12', '6') "regLevl",
             (SELECT r.reglevl_name
                FROM FIN_OPR_REGLEVEL R
               WHERE R.VALID_STATE = '1'
                 and r.reglevl_code =
                     decode(b.levl_code, '2', '9', '3', '12', '6')) "regLevlName"
        from VIEW_USER_PRIV a, COM_EMPLOYEE b
       where a.USER_CODE = DoctCode
         and a.USER_CODE = b.EMPL_CODE
         and a.DEPT_CODE in ('0272', '0264') --妇科
      union all
      select b.EMPL_CODE "emplcode",
             b.EMPL_NAME "emplname",
             a.DEPT_CODE "deptId",
             fun_get_dept_name(a.DEPT_CODE) "deptName",
             (select z.reg_fee + z.chck_fee + z.diag_fee
                from fin_opr_regfeeonpact z
               where z.pact_code = '01'
                 and z.reglevl_code =
                     decode(b.levl_code, '2', '2', '3', '3', '26')) "total",
             decode(b.levl_code, '2', '2', '3', '3', '26') "regLevl",
             (SELECT r.reglevl_name
                FROM FIN_OPR_REGLEVEL R
               WHERE R.VALID_STATE = '1'
                 and r.reglevl_code =
                     decode(b.levl_code, '2', '2', '3', '3', '26')) "regLevlName"
        from VIEW_USER_PRIV a, COM_EMPLOYEE b
       where a.USER_CODE = DoctCode
         and a.USER_CODE = b.EMPL_CODE
         and a.DEPT_CODE in ('0208', '0209', '0248', '0265') --产科
      union all
      select b.EMPL_CODE "emplcode",
             b.EMPL_NAME "emplname",
             a.DEPT_CODE "deptId",
             fun_get_dept_name(a.DEPT_CODE) "deptName",
             (select z.reg_fee + z.chck_fee + z.diag_fee
                from fin_opr_regfeeonpact z
               where z.pact_code = '01'
                 and z.reglevl_code =
                     decode(b.levl_code, '2', '10', '3', '13', '7')) "total",
             decode(b.levl_code, '2', '10', '3', '13', '7') "regLevl",
             (SELECT r.reglevl_name
                FROM FIN_OPR_REGLEVEL R
               WHERE R.VALID_STATE = '1'
                 and r.reglevl_code =
                     decode(b.levl_code, '2', '10', '3', '13', '7')) "regLevlName"
        from VIEW_USER_PRIV a, COM_EMPLOYEE b
       where a.USER_CODE = DoctCode
         and a.USER_CODE = b.EMPL_CODE
         and a.DEPT_CODE = '0203' --口腔科
      union all
      select b.EMPL_CODE "emplcode",
             b.EMPL_NAME "emplname",
             a.DEPT_CODE "deptId",
             fun_get_dept_name(a.DEPT_CODE) "deptName",
             (select z.reg_fee + z.chck_fee + z.diag_fee
                from fin_opr_regfeeonpact z
               where z.pact_code = '01'
                 and z.reglevl_code =
                     decode(b.levl_code, '2', '11', '3', '14', '8')) "total",
             decode(b.levl_code, '2', '11', '3', '14', '8') "regLevl",
             (SELECT r.reglevl_name
                FROM FIN_OPR_REGLEVEL R
               WHERE R.VALID_STATE = '1'
                 and r.reglevl_code =
                     decode(b.levl_code, '2', '2', '11', '3', '14', '8')) "regLevlName"
        from VIEW_USER_PRIV a, COM_EMPLOYEE b
       where a.USER_CODE = DoctCode
         and a.USER_CODE = b.EMPL_CODE
         and a.DEPT_CODE in ('0221', '0282', '0220') --中医科
      union all
      select b.EMPL_CODE "emplcode",
             b.EMPL_NAME "emplname",
             a.DEPT_CODE "deptId",
             fun_get_dept_name(a.DEPT_CODE) "deptName",
             (select z.reg_fee + z.chck_fee + z.diag_fee
                from fin_opr_regfeeonpact z
               where z.pact_code = '01'
                 and z.reglevl_code =
                     decode(b.levl_code, '2', '2', '3', '3', '1')) "total",
             decode(b.levl_code, '2', '2', '3', '3', '1') "regLevl",
             (SELECT r.reglevl_name
                FROM FIN_OPR_REGLEVEL R
               WHERE R.VALID_STATE = '1'
                 and r.reglevl_code =
                     decode(b.levl_code, '2', '2', '3', '3', '1')) "regLevlName"
        from VIEW_USER_PRIV a, COM_EMPLOYEE b
       where a.USER_CODE = DoctCode
         and a.USER_CODE = b.EMPL_CODE
         and a.dept_code in (select m.dept_code
                               from com_department m
                              where m.dept_code not in
                                    ('0221', '0282', '0220', '0203', '0208',
                                     '0209', '0248', '0272', '0264', '0265')
                                and m.dept_type = 'C'
                                AND m.valid_state = '1');
  
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  end PRC_RegisterSMAddQuery;

  --扫码挂号

  PROCEDURE PRC_OutpRegisterSMAdd(DepartCode in varchar2, --科室名称
                                  DoctorCode in varchar2, --医生编号
                                  RegLevel   in varchar2, --挂号等级
                                  CardNo     IN VARCHAR2, --就诊卡号
                                  payStatus  IN VARCHAR2, --支付状态  已支付 1 ，未支付 0
                                  payType    IN VARCHAR2, --支付类型：默认1：微信，2：支付宝3银联
                                  totCost    in number, --挂号费金额
                                  ResultSet  out cc_cursor,
                                  ReturnCode out integer,
                                  ErrorMsg   out VARCHAR2) is
    v_clincNo      varchar2(10);
    vVisit_no      long;
    vVisitAll_no   long;
    numT           Integer;
    numALLT        Integer;
    vnooncode      varchar2(1);
    vsee_type      varchar2(1);
    v_patientinfo  com_patientinfo%rowtype;
    v_invoiceNo    varchar2(12);
    v_deptlocation varchar2(100);
    PayMode        varchar2(10);
  
    v_regCost   NUMBER(10, 2); --挂号费
    v_checkCost NUMBER(10, 2); --检查费
    v_diagCost  NUMBER(10, 2); --诊查费
    v_CardNo    varchar2(10); --卡号
    v_DeptCode  varchar2(10); --挂号科室id
    v_DoctCode  varchar2(10); --挂号医生id
    v_RegLevl   varchar2(10); --挂号级别
    v_TotCost   number(10, 2); --挂号总金额
    regcount    integer;
  begin
  
    begin
      if DepartCode is null or DepartCode = '' then
        ReturnCode := -1;
        ErrorMsg   := '挂号的科室ID不能为空!';
        return;
      end if;
    
      if DoctorCode is null or DoctorCode = '' then
        ReturnCode := -1;
        ErrorMsg   := '挂号的医生ID不能为空!';
        return;
      end if;
    
      if CardNo is null or CardNo = '' then
        ReturnCode := -1;
        ErrorMsg   := '患者的就诊卡号不能为空!';
        return;
      end if;
      if RegLevel is null or RegLevel = '' then
        ReturnCode := -1;
        ErrorMsg   := '挂号级别不能为空!';
        return;
      end if;
    end;
    v_CardNo   := CardNo;
    v_DeptCode := DepartCode;
    v_DoctCode := DoctorCode;
    select count(*)
      into regcount
      from com_dictionary d
     where d.type = 'RegLevel'
       and d.code = RegLevel;
  
    if regcount <= 0 then
      ReturnCode := -1;
      ErrorMsg   := '您输入的挂号级别不存在his系统中的字典表内';
      return;
    else
      select d.code
        into v_RegLevl
        from com_dictionary d
       where d.type = 'RegLevel'
         and d.code = RegLevel;
    end if;
  
    --挂号
    begin
      if payStatus = '0' then
        ReturnCode := -1;
        ErrorMsg   := '挂号失败！你提交的订单未支付，请重试';
        return;
      end if;
    
      select *
        into v_patientinfo
        from com_patientinfo a
       where a.card_no = CardNo;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ReturnCode := -1;
        ErrorMsg   := '找不到患者基本信息!';
        RETURN;
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '查找患者基本信息时出错!' || SQLERRM;
        RETURN;
    end;
    if to_number(to_char(sysdate, 'hh24')) < 12 then
      vnooncode := '1';
    elsif to_number(to_char(sysdate, 'hh24')) >= 12 and
          to_number(to_char(sysdate, 'hh24')) < 18 then
      vnooncode := '2';
    else
      vnooncode := '3';
    end if;
    begin
      --检查挂号费与his系统的对照
      select a.REG_FEE, a.DIAG_FEE, a.CHCK_FEE
        into v_regCost, v_diagCost, v_checkCost
        from FIN_OPR_REGFEEONPACT a
       where a.PACT_CODE = '01'
         and a.REGLEVL_CODE = v_RegLevl;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ReturnCode := -1;
        ErrorMsg   := '找不到挂号费基本信息!';
        RETURN;
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '查找挂号费基本信息时出错!' || SQLERRM;
        RETURN;
    end;
    if totCost <> v_regCost + v_checkCost + v_diagCost then
      ReturnCode := -1;
      ErrorMsg   := '挂号费与HIS系统查询出的挂号总额不一致!' || SQLERRM;
      RETURN;
    end if;
    v_TotCost := totCost;
    SELECT seq_fin_clinicno.nextval into v_clincNo FROM dual;
    if payType = '1' then
      PayMode := 'WX';
    elsif payType = '2' then
      PayMode := 'ZB';
    elsif payType = '3' then
      PayMode := 'CD';
    else
      PayMode := '';
    end if;
    vsee_type := '1';
    select count(*)
      into numT
      from fin_opr_seesequence a --挂号看诊序号表
     WHERE a.see_date = trunc(sysdate)
       AND a.see_type = vsee_type
       AND a.see_subject = v_DoctCode
       AND a.noon_code = vnooncode;
    select count(*)
      into numALLT
      from fin_opr_seesequence a --挂号看诊序号表
     WHERE a.see_date = trunc(sysdate)
       AND a.see_type = '4'
       AND a.see_subject = 'ALL'
       AND a.noon_code = vnooncode;
    --看诊序号表 记录挂号的次数
    begin
      if numT = 0 then
        insert INTO fin_opr_seesequence --挂号看诊序号表
          (see_date, --看诊日期
           see_type, --看诊类型 1医生，2科室
           see_subject, --看诊科目，包括医生、科室
           reglevl_code, --挂号级别
           current_value, --当前序号
           noon_code) --午别
        VALUES
          (trunc(sysdate), --看诊日期
           vsee_type, --看诊类型 1医生，2科室
           v_DoctCode, --看诊科目，包括医生、科室
           v_RegLevl, --挂号级别
           '1', --当前序号
           vnooncode);
      else
        UPDATE fin_opr_seesequence --挂号看诊序号表
           SET current_value = current_value + 1 --当前序号
         WHERE see_date = sysdate
           AND see_type = vsee_type
           AND see_subject = v_DoctCode
           AND noon_code = vnooncode;
      end if;
      BEGIN
        SELECT current_value
          into vVisit_no --当前序号
          FROM fin_opr_seesequence --挂号看诊序号表
         WHERE see_date = trunc(sysdate)
           AND see_type = vsee_type
           AND see_subject = v_DoctCode
           AND noon_code = vnooncode;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '挂号看诊序号表(fin_opr_seesequence)失败!';
          RETURN;
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '检索挂号看诊序号表(fin_opr_seesequence)时出错!' || SQLERRM;
          RETURN;
      END;
      if numALLT = 0 then
        INSERT INTO fin_opr_seesequence --挂号看诊序号表
          (see_date, --看诊日期
           see_type, --看诊类型 1医生，2科室
           see_subject, --看诊科目，包括医生、科室
           reglevl_code, --挂号级别
           current_value, --当前序号
           noon_code) --午别
        VALUES
          (trunc(sysdate), --看诊日期
           '4', --看诊类型 1医生，2科室
           'ALL', --看诊科目，包括医生、科室
           v_RegLevl, --挂号级别
           '1', --当前序号
           vnooncode);
      else
        UPDATE fin_opr_seesequence --挂号看诊序号表
           SET current_value = current_value + 1 --当前序号
         WHERE see_date = trunc(sysdate)
           AND see_type = '4'
           AND see_subject = 'ALL'
           AND noon_code = vnooncode;
      end if;
      BEGIN
        SELECT current_value
          into vVisitAll_no --当前序号
          FROM fin_opr_seesequence --挂号看诊序号表
         WHERE see_date = trunc(sysdate)
           AND see_type = '4'
           AND see_subject = 'ALL'
           AND noon_code = vnooncode;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := 'vVisitAll_no(fin_opr_seesequence)失败!';
          RETURN;
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '检索vVisitAll_no(fin_opr_seesequence)时出错!' ||
                        SQLERRM;
          RETURN;
      END;
      select seq_fin_opb_invoice.Nextval into v_invoiceNo from dual;
    
      INSERT INTO fin_opr_register a --挂号主表
        (clinic_code, --门诊号/发票号
         card_no, --就诊卡号
         reg_date, --挂号日期
         noon_code, --午别
         name, --姓名
         idenno, --身份证号
         sex_code, --性别
         birthday, --出生日
         paykind_code, --结算类别号
         paykind_name, --结算类别名称
         pact_code, --合同号
         pact_name, --合同单位名称
         mcard_no, --医疗证号
         reglevl_code, --挂号级别
         reglevl_name, --挂号级别名称
         dept_code, --科室号
         dept_name, --科室名称
         seeno, --看诊序号
         doct_code, --医师代号
         doct_name, --医师姓名
         see_date, --看诊日期
         ynregchrg, --挂号收费标志
         ynbook, --是否预约
         ynfr, --1初诊/2复诊
         --   append_flag ,--1加号/0正常
         reg_fee, --挂号费
         chck_fee, --检查费
         diag_fee, --诊察费
         oth_fee, --附加费
         own_cost, --自费金额
         pub_cost, --报销金额
         pay_cost, --自付金额
         valid_flag, --退号标志
         oper_code, --操作员代码
         ynsee, --是否看诊
         check_flag, --1未核查/2已核查
         rela_phone, --联系电话
         address, --地址
         trans_type, --交易类型
         card_type, --证件类型
         begin_time, --开始时间段
         end_time, --结束时间段
         cancel_opcd, --作废人
         cancel_date, --作废时间
         invoice_no,
         recipe_no,
         append_flag,
         order_no,
         schema_no,
         oper_date, --操作时间
         in_source,
         is_sendinhoscase,
         IS_ENCRYPTNAME,
         normalname,
         eco_cost,
         IS_Account,
         account_no,
         rec_id)
      VALUES
        (v_clincNo, --门诊号/发票号
         v_patientinfo.CARD_NO, --就诊卡号
         trunc(sysdate), --挂号日期
         vnooncode, --午别
         v_patientinfo.name, --姓名
         v_patientinfo.idenno, --身份证号
         v_patientinfo.sex_code, --性别
         v_patientinfo.birthday, --出生日
         '01', --结算类别号
         '', --结算类别名称
         '01', --合同号
         '自费', --合同单位名称
         '', --医疗证号
         v_RegLevl, --挂号级别
         (select d.name
            from com_dictionary d
           where d.type = 'RegLevel'
             and d.code = v_RegLevl), --挂号级别名称
         v_DeptCode, --科室号
         fun_get_dept_name(v_DeptCode), --科室名称
         vVisit_no, --看诊序号
         nvl(v_DoctCode, ''), --医师代号
         fun_get_empl_name(v_DoctCode), --医师姓名
         sysdate, --看诊日期
         '1', --挂号收费标志
         '0', --是否预约
         '1', --1初诊/2复诊
         -- '1',--1加号/0正常
         v_regCost, --挂号费
         v_checkCost, --检查费
         v_diagCost, --诊察费
         '0', --附加费
         v_TotCost, --自费金额
         '0', --报销金额
         '0', --自付金额
         '1', --有效标志
         '006688', --操作员代码
         '0', --是否看诊
         '0', --1未核查/2已核查
         v_patientinfo.linkman_tel, --联系电话
         v_patientinfo.home, --地址
         '1', --交易类型
         '01', --证件类型
         sysdate, --开始时间
         sysdate + 1, --结束时间
         '', --作废人
         to_date('0001-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'),
         v_invoiceNo,
         vVisitAll_no,
         '0',
         '1',
         '',
         sysdate,
         '1',
         '0',
         '0',
         '',
         '0',
         '0',
         '', --账号
         '');
    
    end;
  
    open ResultSet for
      select '1' as "status",
             v_invoiceNo as "tiketNo",
             v_clincNo as "clincNo"
        from dual;
    ReturnCode := 1;
    ErrorMsg   := '挂号成功!';
  
    commit;
  end PRC_OutpRegisterSMAdd;

  PROCEDURE PRC_OutpRegisterCancel(ClinicNo   in varchar2,
                                   ReturnSet  out cc_cursor,
                                   ReturnCode out integer,
                                   ErrorMsg   out varchar2) is
    v_ClinicNo    varchar2(20);
    v_isFee       integer;
    v_register    fin_opr_register%rowtype;
    v_preregister FIN_OPR_PREREGISTER%ROWTYPE;
  
  begin
    if ClinicNo is null or ClinicNo = '' then
      ReturnCode := -1;
      ErrorMsg   := '你输入的挂号id不得为空';
      return;
    end if;
    v_ClinicNo := ClinicNo;
  
    begin
      select *
        into v_register
        from fin_opr_register r
       where r.clinic_code = v_ClinicNo;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '挂号表查询无数据(fin_opr_register)失败!';
        RETURN;
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '检索挂号表(fin_opr_register)时出错!' || SQLERRM;
        RETURN;
    END;
  
    if v_register.ynsee = '1' then
      ReturnCode := -1;
      ErrorMsg   := '该号已看诊不得进行退号！';
      return;
    ELSIF v_register.valid_flag = '0' then
      ReturnCode := -1;
      ErrorMsg   := '该号已退费不得进行重复操作';
      return;
    elsif v_register.valid_flag = '2' then
      ReturnCode := -1;
      ErrorMsg   := '该号已作废不得进行操作！';
      return;
    end if;
    begin
      if v_register.ynbook = '1' then
        select *
          into v_preregister
          from FIN_OPR_PREREGISTER r
         where r.REC_ID = v_register.REC_ID;
      end if;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ReturnCode := -1;
        ErrorMsg   := '预约表查询无数据(FIN_OPR_PREREGISTER)失败!';
        RETURN;
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '检索预约表(FIN_OPR_PREREGISTER)时出错!' || SQLERRM;
        RETURN;
    end;
  
    begin
      --SELECT seq_fin_clinicno.nextval into v_newClinicNo FROM dual;
      INSERT INTO fin_opr_register a --挂号主表
        (clinic_code, --门诊号/发票号
         card_no, --就诊卡号
         reg_date, --挂号日期
         noon_code, --午别
         name, --姓名
         idenno, --身份证号
         sex_code, --性别
         birthday, --出生日
         paykind_code, --结算类别号
         paykind_name, --结算类别名称
         pact_code, --合同号
         pact_name, --合同单位名称
         mcard_no, --医疗证号
         reglevl_code, --挂号级别
         reglevl_name, --挂号级别名称
         dept_code, --科室号
         dept_name, --科室名称
         seeno, --看诊序号
         doct_code, --医师代号
         doct_name, --医师姓名
         see_date, --看诊日期
         ynregchrg, --挂号收费标志
         ynbook, --是否预约
         ynfr, --1初诊/2复诊
         reg_fee, --挂号费
         chck_fee, --检查费
         diag_fee, --诊察费
         oth_fee, --附加费
         own_cost, --自费金额
         pub_cost, --报销金额
         pay_cost, --自付金额
         valid_flag, --退号标志
         oper_code, --操作员代码
         ynsee, --是否看诊
         check_flag, --1未核查/2已核查
         rela_phone, --联系电话
         address, --地址
         trans_type, --交易类型
         card_type, --证件类型
         begin_time, --开始时间段
         end_time, --结束时间段
         cancel_opcd, --作废人
         cancel_date, --作废时间
         invoice_no,
         recipe_no,
         append_flag,
         order_no,
         schema_no,
         oper_date, --操作时间
         in_source,
         is_sendinhoscase,
         IS_ENCRYPTNAME,
         normalname,
         eco_cost,
         IS_Account,
         account_no)
      VALUES
        (v_register.CLINIC_CODE, --门诊号/发票号
         v_register.CARD_NO, --就诊卡号
         v_register.reg_date, --退号日期
         v_register.NOON_CODE, --午别
         v_register.name, --姓名
         v_register.idenno, --身份证号
         v_register.sex_code, --性别
         v_register.birthday, --出生日
         v_register.paykind_code, --结算类别号
         v_register.paykind_name, --结算类别名称
         v_register.pact_code, --合同号
         v_register.pact_name, --合同单位名称
         '', --医疗证号
         v_register.REGLEVL_CODE, --挂号级别
         v_register.REGLEVL_NAME, --挂号级别名称
         v_register.DEPT_CODE, --科室号
         fun_get_dept_name(v_register.dept_code), --科室名称
         v_register.seeno, --看诊序号
         v_register.doct_code, --医师代号
         v_register.doct_name, --医师姓名
         to_date('0001-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), --看诊日期
         '1', --挂号收费标志
         v_register.ynbook, --是否预约
         '1', --1初诊/2复诊
         0 - v_register.reg_fee, --挂号费
         0 - v_register.chck_fee, --检查费
         0 - v_register.diag_fee, --诊察费
         '0', --附加费
         0 - v_register.own_cost, --自费金额
         '0', --报销金额
         '0', --自付金额
         '0', --有效标志
         '006688', --操作员代码
         '0', --是否看诊
         '0', --1未核查/2已核查
         v_register.rela_phone, --联系电话
         v_register.address, --地址
         '2', --交易类型
         '01', --证件类型
         sysdate, --开始时间
         to_date('0001-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), --结束时间
         '', --作废人
         to_date('0001-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'),
         v_register.invoice_no,
         v_register.recipe_no,
         '0',
         '1',
         '',
         sysdate,
         '1',
         '0',
         '0',
         '',
         '0',
         '0',
         '' --账号
         );
    
      UPDATE fin_opr_register --挂号主表
         SET valid_flag  = '0', --退号标志
             cancel_opcd = '006688', --作废人
             cancel_date = to_date(sysdate, 'yyyy-mm-dd HH24:mi:ss') --作废时间
       WHERE clinic_code = v_register.clinic_code
         AND trans_type = '1'
         AND valid_flag = '1';
      if v_register.ynbook = '1' then
        --释放号码池
        update fin_opr_register_pool t
           set t.status = '1'
         where t.pool_id = v_preregister.POOL_ID;
        --修改排班表已预约数量
        update fin_opr_schema
           set tel_reging = tel_reging - 1
         where id = v_preregister.SCHEMA_ID;
        --作废预约记录
        update FIN_OPR_PREREGISTER t
           set t.status = '0'
         where t.rec_id = v_preregister.rec_id;
      end if;
    exception
      when others then
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '退号操作不成功！' || SQLERRM;
        return;
      
    end;
    commit;
    open ReturnSet for
      select '1' "status", v_register.clinic_code "newClinicNo" from dual;
  
    ReturnCode := 1;
    ErrorMsg   := '退号成功';
  end PRC_OutpRegisterCancel;

  --缴费查询
  /*1 挂号订单 2 预交金订单 4 门诊缴费 5 住院清单 6 日清单  7 扫码缴费查询  8 挂号订单查询*/
  PROCEDURE getHospitalItemList(appointmentId in varchar2, --挂号单ID就诊卡号
                                bizType       in varchar2, /*医院项目/各类单据名称枚举*/
                                status        in varchar2, /*单据状态（检索时使用，查看单据状态枚举）*/
                                
                                ReturnSet  out cc_cursor,
                                ReturnCode out integer,
                                ErrorMsg   out varchar2) is
    v_ClincNo     varchar(30);
    v_inpatientNo varchar2(30);
    v_Paystatus   varchar2(2);
  begin
    if appointmentId is null or appointmentId = '' then
      rollback;
      ReturnCode := -1;
      ErrorMsg   := '就诊卡号id不得为空成功！' || SQLERRM;
      return;
    else
      v_ClincNo := appointmentId;
    end if;
  
    begin
      if bizType = '1' then
      
        select p.inpatient_no
          into v_inpatientNo
          from fin_ipr_inmaininfo p
         where p.patient_no = appointmentId
           and p.in_state in ('I', 'R')
           and rownum = 1;
        open ReturnSet for
          select i.name
            from fin_ipb_inprepay i
           where i.inpatient_no = v_inpatientNo;
      
      elsif bizType = '4' then
        if status is null or status = '' then
          ReturnCode := -1;
          ErrorMsg   := '状态不得为空成功！' || SQLERRM;
          return;
        elsif status = '1' then
          v_Paystatus := '0';
        elsif status = '2' then
          v_Paystatus := '1';
        else
          v_Paystatus := '1';
        end if;
      
        open ReturnSet for
          select m."OrderNo"          as "OrderNo",
                 m."cardNo"           as "cardNo",
                 m."billId"           as "billId",
                 m."invoiceNo"        as "invoiceNo",
                 m."patientName"      as "patientName",
                 m."deptName"         as "deptName",
                 m."doctorName"       as "doctorName",
                 m."userPhoto"        as "userPhoto",
                 m."hospitalizedDate" as "hospitalizedDate",
                 m."leaveDate"        as "leaveDate",
                 m."itemName"         as "itemName",
                 m."qty"              as "qty",
                 m."total"            as "total",
                 m."status"           as "status",
                 m."payStatus"        as "payStatus",
                 m."time"             as "time"
            from (select b.recipe_no as "OrderNo",
                         a.card_no as "cardNo",
                         a.clinic_code as "billId",
                         b.invoice_no as "invoiceNo",
                         a.name as "patientName",
                         a.dept_name as"deptName",
                         fun_get_empl_name(a.doct_code) as "doctorName",
                         '' "userPhoto",
                         a.see_date as "hospitalizedDate",
                         a.see_date as "leaveDate",
                         b.item_name as "itemName",
                         b.qty / b.pack_qty || b.price_unit ||
                         decode(mod(b.qty, b.pack_qty),
                                0,
                                '',
                                mod(b.qty, b.pack_qty) || b.dose_unit) as "qty",
                         b.own_cost as "total",
                         decode(b.pay_flag, '1', '2', '0', '1', '0') as "status",
                         decode(b.pay_flag, '1', '2', '0', '1', '0') as "payStatus",
                         to_char(b.fee_date, 'yyyy-mm-dd hh24:mi:ss') as "time"
                    from fin_opr_register a, fin_opb_feedetail b
                   where a.clinic_code = b.clinic_code
                     and a.CARD_NO = v_ClincNo
                     and b.reg_dpcd <> '3004'
                     and b.pay_flag = v_Paystatus
                     and a.valid_flag = '1'
                     and b.oper_date >= trunc(sysdate - 30)
                  /* union all
                                                                        select b.recipe_no as "OrderNo",
                                                                               a.card_no as "cardNo",
                                                                               a.clinic_code as "billId",
                                                                               b.invoice_no as "invoiceNo",
                                                                               a.name as "patientName",
                                                                               a.dept_name as "deptName",
                                                                               fun_get_empl_name(a.doct_code) as "doctorName",
                                                                               '' as "userPhoto",
                                                                               a.see_date as"hospitalizedDate",
                                                                               a.see_date as "leaveDate",
                                                                               b.item_name as "itemName",
                                                                               b.qty / b.pack_qty || b.price_unit ||
                                                                               decode(mod(b.qty, b.pack_qty),
                                                                                      0,
                                                                                      '',
                                                                                      mod(b.qty, b.pack_qty) || b.dose_unit) as "qty",
                                                                               (case
                                                                                 when b.drug_flag = '0' and
                                                                                      (select n.Unitflag
                                                                                         from fin_com_undruginfo n
                                                                                        where n.item_code = b.item_code) = '1' then
                                                                                  b.qty * (select sum(c.qty * nvl((select n.unit_price
                                                                                                                    from fin_com_undruginfo n
                                                                                                                   where n.item_code =
                                                                                                                         c.item_code
                                                                                                                     and c.valid_state = '1'),
                                                                                                                  0))
                                                                                             from fin_com_undrugztinfo c
                                                                                            where c.package_code = b.item_code
                                                                                              and c.valid_state = '1')
                                                                                 else
                                                                                  b.pub_cost + b.pay_cost + b.own_cost
                                                                               end) as "total",
                                                                               '0' as "status",
                                                                               b.pay_flag as "payStatus",
                                                                               to_char(b.fee_date, 'yyyy-mm-dd hh24:mi:ss') as "time"
                                                                          from fin_opr_register a, fin_opb_feedetail b
                                                                         where a.clinic_code = b.clinic_code
                                                                           and a.CARD_NO = v_ClincNo
                                                                           and b.reg_dpcd <> '3004'
                                                                           and b.pay_flag = '0'
                                                                           and a.valid_flag = '1'
                                                                           and b.oper_date >= trunc(sysdate - 30)*/
                  ) m
           order by m."time" desc;
      elsif bizType = '6' then
        open ReturnSet for
          select b.recipe_no "OrderNo",
                 a.card_no "cardNo",
                 a.clinic_code "billId",
                 a.name "patientName",
                 a.dept_name "deptName",
                 fun_get_empl_name(a.doct_code) "doctorName",
                 '' "userPhoto",
                 a.see_date "hospitalizedDate",
                 a.see_date "leaveDate",
                 b.item_name "itemName",
                 b.qty / b.pack_qty || b.price_unit ||
                 decode(mod(b.qty, b.pack_qty),
                        0,
                        '',
                        mod(b.qty, b.pack_qty) || b.dose_unit) "qty",
                 decode(b.pay_flag,
                        '0',
                        (case
                          when b.drug_flag = '0' and
                               (select n.Unitflag
                                  from fin_com_undruginfo n
                                 where n.item_code = b.item_code) = '1' then
                           b.qty *
                           (select sum(c.qty * nvl((select n.unit_price
                                                     from fin_com_undruginfo n
                                                    where n.item_code = c.item_code
                                                      and c.valid_state = '1'),
                                                   0))
                              from fin_com_undrugztinfo c
                             where c.package_code = b.item_code
                               and c.valid_state = '1')
                          else
                           b.pub_cost + b.pay_cost + b.own_cost
                        end),
                        '1',
                        b.pay_cost + b.own_cost + b.pub_cost) "total",
                 '1' "status",
                 decode(b.pay_flag, '1', '2', '0', '1', '0') "payStatus",
                 to_char(b.fee_date, 'yyyy-mm-dd hh24:mi:ss') as "time"
            from fin_opr_register a, fin_opb_feedetail b
           where a.clinic_code = b.clinic_code
             and a.CARD_NO = v_ClincNo
             and a.valid_flag = '1'
           order by b.fee_date desc;
        --门诊收费 未缴费的订单查询
      elsif bizType = '7' then
        open ReturnSet for
          select b.recipe_no as "OrderNo",
                 a.card_no as "cardNo",
                 a.clinic_code as "billId",
                 b.invoice_no as "invoiceNo",
                 a.name as "patientName",
                 a.dept_name as "deptName",
                 fun_get_empl_name(a.doct_code) as "doctorName",
                 '' as "userPhoto",
                 a.see_date as"hospitalizedDate",
                 a.see_date as "leaveDate",
                 b.item_name as "itemName",
                 b.qty as "qty",
                 (case
                   when b.drug_flag = '0' and
                        (select n.Unitflag
                           from fin_com_undruginfo n
                          where n.item_code = b.item_code) = '1' then
                    b.qty *
                    (select sum(c.qty * nvl((select n.unit_price
                                              from fin_com_undruginfo n
                                             where n.item_code = c.item_code
                                               and c.valid_state = '1'),
                                            0))
                       from fin_com_undrugztinfo c
                      where c.package_code = b.item_code
                        and c.valid_state = '1')
                   else
                    b.pub_cost + b.pay_cost + b.own_cost
                 end) as "total",
                 '1' as "status",
                 b.pay_flag as "payStatus",
                 to_char(b.fee_date, 'yyyy-mm-dd hh24:mi:ss') as "time"
            from fin_opr_register a, fin_opb_feedetail b
           where b.clinic_code = a.clinic_code
             and a.clinic_code = v_ClincNo
             and a.valid_flag = '1'
             and b.pay_flag = '0'
           order by b.fee_date desc;
      elsif bizType = '5' then
        open ReturnSet for
          select i.inpatient_no as "inpatientNo",
                 i.dept_name as "deptName",
                 i.name as "name",
                 i.bed_no as "bedNo",
                 (select nvl(sum(nvl(f.tot_cost, 0)), 0)
                    from fin_ipb_feeinfo f
                   where f.inpatient_no = i.inpatient_no) as "totalCost",
                 to_char(i.in_date, 'yyyy-mm-dd') as "inDate",
                 decode(i.in_state,
                        'I',
                        trunc(sysdate) - trunc(i.in_date),
                        'B',
                        trunc(i.out_date) - trunc(i.in_date),
                        'O',
                        trunc(i.out_date) - trunc(i.in_date),
                        trunc(i.out_date) - trunc(i.in_date)) as "days",
                 decode(i.in_state,
                        'I',
                        to_char(sysdate, 'yyyy-mm-dd'),
                        'B',
                        to_char(i.out_date, 'yyyy-mm-dd'),
                        'O',
                        to_char(i.out_date, 'yyyy-mm-dd'),
                        to_char(i.out_date, 'yyyy-mm-dd')) as "outDate",
                 decode(i.in_state,
                        'I',
                        '住院中',
                        'B',
                        '已出院',
                        'O',
                        '已出院',
                        '已出院') as "instate"
          
            from fin_ipr_inmaininfo i
           where (i.patient_no = appointmentId or i.card_no = appointmentId);
      
      end if;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '没有找到该患者如何费用信息!';
        RETURN;
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '查询患者费用信息时出现错误' || SQLERRM;
        RETURN;
    END;
  
    ReturnCode := 1;
    ErrorMsg   := '查询成功' || v_Paystatus;
  
  end getHospitalItemList;

  /*1 日清单 2 住院日清单*/

  PROCEDURE GetQDForDate(appointmentId in varchar2, --门诊号  &住院号
                         bizType       in varchar2, /*医院项目/各类单据名称枚举*/
                         patientName   in varchar2, /*单据状态（检索时使用，查看单据状态枚举）*/
                         QueryDate     in varchar2,
                         ReturnSet     out cc_cursor,
                         ReturnCode    out integer,
                         ErrorMsg      out varchar2) is
    v_ClincNo     varchar2(30);
    v_Name        varchar2(30);
    v_InpatientNo varchar2(30);
    v_Date        date;
  
  begin
    if appointmentId is null or appointmentId = '' then
      rollback;
      ReturnCode := -1;
      ErrorMsg   := 'id不得为空成功！' || SQLERRM;
      return;
    end if;
  
    if patientName is null or patientName = '' then
      rollback;
      ReturnCode := -1;
      ErrorMsg   := '患者姓名不得为空成功！' || SQLERRM;
      return;
    else
      v_Name := patientName;
    end if;
  
    begin
      if bizType = '1' then
        v_ClincNo := appointmentId;
        if QueryDate is null or QueryDate = '' then
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '查询日期不得为空成功！' || SQLERRM;
          return;
        else
          v_Date := to_date(QueryDate, 'yyyy-mm-dd hh24:mi:ss');
        end if;
        open ReturnSet for
          select b.recipe_no "OrderNo",
                 a.card_no "cardNo",
                 a.clinic_code "billId",
                 a.name "patientName",
                 a.dept_name "deptName",
                 fun_get_empl_name(a.doct_code) "doctorName",
                 '' "userPhoto",
                 a.see_date "hospitalizedDate",
                 a.see_date "leaveDate",
                 b.item_name "itemName",
                 to_char(to_number(round(b.qty / b.pack_qty, 4))) "qty",
                 b.own_cost + b.pay_cost + b.pub_cost "total",
                 '1' "status",
                 decode(b.pay_flag, '1', '2', '0', '1', '0') "payStatus"
            from fin_opr_register a, fin_opb_feedetail b
           where a.clinic_code = b.clinic_code
             and a.clinic_code = v_ClincNo
             and a.valid_flag = '1'
             and b.oper_date > trunc(v_Date)
             and b.oper_date < trunc(v_Date + 1)
             and a.name = v_Name
           order by b.oper_date desc;
      elsif bizType = '2' then
        if QueryDate is null or QueryDate = '' then
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '查询日期不得为空成功！' || SQLERRM;
          return;
        else
          v_Date := to_date(QueryDate, 'yyyy-mm-dd hh24:mi:ss');
        end if;
        v_InpatientNo := appointmentId;
        open ReturnSet for
          select '枝江市人民医院' "hospitalName",
                 f.name "patientName",
                 f.inpatient_no "hospitalNo",
                 f.in_date "inTime",
                 f.out_date "outTime",
                 i.item_name "titleName",
                 i.current_unit "unit",
                 i.qty "num",
                 i.tot_cost "price"
            from fin_ipb_itemlist i, fin_ipr_inmaininfo f
           where i.inpatient_no = f.inpatient_no
             and f.inpatient_no = v_InpatientNo
             and trunc(i.fee_date) = trunc(v_Date)
             and f.name = v_Name
          union all
          select '枝江市人民医院' "hospitalName",
                 f.name "patientName",
                 f.inpatient_no "hospitalNo",
                 f.in_date "inTime",
                 f.out_date "outTime",
                 l.drug_name "titleName",
                 l.current_unit "unit",
                 l.qty "num",
                 l.tot_cost "price"
            from fin_ipb_medicinelist l, fin_ipr_inmaininfo f
           where l.inpatient_no = f.inpatient_no
             and f.inpatient_no = v_InpatientNo
             and trunc(l.fee_date) = trunc(v_Date)
             and f.name = v_Name;
      elsif bizType = '3' then
        if QueryDate is null or QueryDate = '' then
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '查询日期不得为空成功！' || SQLERRM;
          return;
        else
          v_Date := to_date(QueryDate, 'yyyy-mm-dd hh24:mi:ss');
        end if;
        begin
          select i.inpatient_no
            into v_InpatientNo
            from fin_ipr_inmaininfo i
           where i.in_state = 'I'
             and i.patient_no = appointmentId
             and rownum = 1;
        exception
          when NO_DATA_FOUND THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := '在对应的时间内没有找到该患者的住院流水号!';
            RETURN;
          WHEN OTHERS THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := '在对应的时间内没有找到该患者的住院流水号' || SQLERRM;
            RETURN;
        end;
        --  v_InpatientNo := appointmentId;
        open ReturnSet for
          select '枝江市人民医院' "hospitalName",
                 f.name "patientName",
                 f.inpatient_no "hospitalNo",
                 f.in_date "inTime",
                 f.out_date "outTime",
                 i.item_name "titleName",
                 i.current_unit "unit",
                 i.qty "num",
                 i.tot_cost "price"
            from fin_ipb_itemlist i, fin_ipr_inmaininfo f
           where i.inpatient_no = f.inpatient_no
             and f.inpatient_no = v_InpatientNo
             and trunc(i.fee_date) = trunc(v_Date)
             and f.name = v_Name
          union all
          select '枝江市人民医院' "hospitalName",
                 f.name "patientName",
                 f.inpatient_no "hospitalNo",
                 f.in_date "inTime",
                 f.out_date "outTime",
                 l.drug_name "titleName",
                 l.current_unit "unit",
                 l.qty "num",
                 l.tot_cost "price"
            from fin_ipb_medicinelist l, fin_ipr_inmaininfo f
           where l.inpatient_no = f.inpatient_no
             and f.inpatient_no = v_InpatientNo
             and trunc(l.fee_date) = trunc(v_Date)
             and f.name = v_Name;
      end if;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '没有找到该患者如何费用信息!';
        RETURN;
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '查询患者费用信息时出现错误' || SQLERRM;
        RETURN;
    END;
  
    ReturnCode := 1;
    ErrorMsg   := '查询成功';
  
  end GetQDForDate;

  --查询挂号看诊状态
  PROCEDURE QueryRegStatus(CardNo     in varchar2,
                           ReturnSet  out cc_cursor,
                           ReturnCode out integer,
                           ErrorMsg   out varchar2) is
    v_CardNo varchar2(20);
  
  begin
    if CardNo is null or CardNo = '' then
      ReturnCode := -1;
      ErrorMsg   := '就诊卡号不能为空' || sqlerrm;
      return;
    else
      v_CardNo := CardNo;
    end if;
    begin
      open ReturnSet for
        select r.rec_id      "hisOrderNo",
               r.clinic_code "clinic_No",
               r.ynsee       "registerStatus"
          from fin_opr_register r
         where r.card_no = v_CardNo
           and r.valid_flag = '1';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '没有找到该患者如何费用信息!';
        RETURN;
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '查询患者费用信息时出现错误' || SQLERRM;
        RETURN;
    end;
    ReturnCode := 1;
    ErrorMsg   := '查询成功！';
  end QueryRegStatus;

  PROCEDURE DiagFeeZT(clincNo    IN VARCHAR2,
                      ReturnCode out integer,
                      ErrorMsg   out VARCHAR2) is
    cursor feeItem is
      select *
        from fin_opb_feedetail a
       where a.clinic_code = clincNo
         and a.pay_flag = '0'
         and a.drug_flag = '0';
    feeItemRow fin_opb_feedetail%ROWTYPE;
    feetemp    fin_opb_feedetail%ROWTYPE;
    cursor unitDetails(v_itemCode IN VARCHAR2) is
      select dd.item_code,
             dd.item_name,
             dd.qty,
             e.sys_class,
             e.fee_code,
             e.unit_price,
             e.specs,
             e.stock_unit,
             e.confirm_flag,
             e.exedept_code
        from fin_com_undrugztinfo dd, fin_com_undruginfo e
       where dd.package_code = v_itemCode --复合项目的编号   page_code 对应的组的编号
         and dd.valid_state = '1'
         and dd.item_code = e.item_code
         and e.valid_state = '1';
    v_unitflag varchar2(1);
    v_seqno    number;
  begin
    begin
      open feeItem;
      loop
        fetch feeItem
          into feeItemRow;
        exit when feeItem%NOTFOUND;
        select a.unitflag
          into v_unitflag
          from fin_com_undruginfo a
         where a.item_code = feeItemRow.Item_Code;
        if v_unitflag = '1' then
          delete from fin_opb_feedetail b
           where b.recipe_no = feeItemRow.Recipe_No
             and b.sequence_no = feeItemRow.Sequence_No;
          select max(b.sequence_no)
            into v_seqno
            from fin_opb_feedetail b
           where b.recipe_no = feeItemRow.Recipe_No;
          if v_seqno is null or v_seqno = '' then
            v_seqno := 0;
          end if;
          FOR unitDetails1 IN unitDetails(feeItemRow.Item_Code) LOOP
            v_seqno              := v_seqno + 1;
            feetemp              := feeItemRow;
            feetemp.sequence_no  := v_seqno;
            feetemp.item_code    := unitDetails1.Item_Code;
            feetemp.item_name    := unitDetails1.Item_Name;
            feetemp.class_code   := unitDetails1.Sys_Class;
            feetemp.qty          := unitDetails1.Qty * feeItemRow.Qty;
            feetemp.noback_num   := unitDetails1.Qty * feeItemRow.Qty;
            feetemp.package_code := feeItemRow.Item_Code;
            feetemp.package_name := feeItemRow.Item_Name;
            feetemp.unit_price   := unitDetails1.Unit_Price;
            feetemp.specs        := unitDetails1.Specs;
            feetemp.price_unit   := unitDetails1.Stock_Unit;
            feetemp.own_cost     := feetemp.qty * feetemp.unit_price;
            feetemp.fee_code     := unitDetails1.Fee_Code;
            feetemp.pub_cost     := 0;
            feetemp.pay_cost     := 0;
            feetemp.exec_dpcd    := feeItemRow.Exec_Dpcd;
            feetemp.exec_dpnm    := fun_get_dept_name(feeItemRow.Exec_Dpcd);
            feetemp.confirm_flag := unitDetails1.Confirm_Flag;
            insert into fin_opb_feedetail values feetemp;
          end loop;
        end if;
      end loop;
      close feeItem;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        ReturnCode := -1;
        ErrorMsg   := '拆分复合项目明细失败!';
        RETURN;
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '拆分复合项目明细失败!' || SQLERRM;
        RETURN;
        rollback;
    end;
    commit;
    ReturnCode := 1;
    ErrorMsg   := '拆分复合项目明细成功！';
  end DiagFeeZT;

  --确认收费
  PROCEDURE PRC_OutpBillsPayedConfirm(billId     in varchar2, --就诊卡号
                                      OrderNo    in varchar2, --订单号  fin_opb_feedetial的recipeno
                                      status     in varchar2, --支付状态
                                      billType   in varchar2,
                                      payType    in varchar2, --支付方式默认1：微信，2：支付宝3银联
                                      ZFAmount   IN NUMBER,
                                      YBZHAmount IN NUMBER,
                                      YBTCAmount IN NUMBER,
                                      ReturnSet  out cc_cursor,
                                      ReturnCode out integer,
                                      ErrorMsg   out VARCHAR2) is
    CURSOR cur_fee(v_clincNo VARCHAR2) IS
      SELECT *
        FROM fin_opb_feedetail t
       WHERE t.clinic_code = v_clincNo
         and t.recipe_no in
             (SELECT REGEXP_SUBSTR(OrderNo, '[^|]+', 1, LEVEL) recipe_no
                FROM DUAL
              CONNECT BY REGEXP_SUBSTR(OrderNo, '[^|]+', 1, LEVEL) IS NOT NULL)
         and t.pay_flag = '0';
    v_applyid          VARCHAR2(10);
    v_count            number;
    v_confirm          VARCHAR2(1);
    v_totalcost        number(12, 2);
    v_invoiceNo        VARCHAR2(12);
    v_invoiceseq       VARCHAR2(20);
    v_balanceComNo     VARCHAR2(20);
    v_stateCode        VARCHAR2(2);
    v_stateName        VARCHAR2(20);
    v_invoiceCount     number;
    v_feedate          date;
    v_pubCost          number(12, 2) := 0;
    v_payCost          number(12, 2) := 0;
    v_owmCost          number(12, 2) := 0;
    v_windowsinfo      VARCHAR2(100) := '';
    V_TERMINALAPPLYSeq VARCHAR2(20);
    v_paymode          varchar2(20);
    v_accountno        varchar2(20);
    v_balancecost      number(12, 2) := 0;
    v_pactCode         varchar2(2) := '01';
    v_pactName         varchar2(20) := '自费';
    v_paykindCode      varchar2(2) := '01';
    v_dkjy             varchar2(1000);
    v_jsjy             varchar2(1000);
    v_jssr             varchar2(100);
    v_HisOperNum       varchar(20) := '006688';
    v_ZFAmount         number(10, 2);
    v_register         fin_opr_register%rowtype;
    v_billNo           varchar2(20);
    v_paycode          varchar(2);
    v_countFee         integer;
    v_OrderNo          varchar2(1000);
  begin
    if billId is null or billId = '' then
      ReturnCode := -1;
      ErrorMsg   := '单据号不能为空';
      return;
    else
      v_billNo := billId;
    end if;
    begin
      select *
        into v_register
        from fin_opr_register r
       where r.clinic_code = v_billNo;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '没有找到该患者信息!';
        RETURN;
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '查询患者信息时出现错误' || SQLERRM;
        RETURN;
    END;
  
    DiagFeeZT(v_register.clinic_code, ReturnCode, ErrorMsg);
    if ReturnCode = -1 then
      rollback;
      return;
    end if;
    if OrderNo is null or OrderNo = '' then
      rollback;
      ReturnCode := -1;
      ErrorMsg   := '处方id不为空' || SQLERRM;
      RETURN;
    end if;
    v_OrderNo := OrderNo;
    --获取发票
    select lpad(seq_fin_opb_invoice.Nextval, 12, '0')
      into v_invoiceNo
      from dual; --发票号
    select seq_fin_opb_balancecombono.nextval
      into v_balanceComNo
      from dual; --结算租号
    select seq_fin_opb_invoice.nextval into v_invoiceseq from dual; --发票序列号
    select sysdate into v_feedate from dual; --结算时间
  
    --判断收费项目
    SELECT count(*)
      into v_countFee
      FROM fin_opb_feedetail t
     WHERE t.clinic_code = v_register.CLINIC_CODE
       and t.recipe_no in
           (SELECT REGEXP_SUBSTR(OrderNo, '[^|]+', 1, LEVEL) recipe_no
              FROM DUAL
            CONNECT BY REGEXP_SUBSTR(OrderNo, '[^|]+', 1, LEVEL) IS NOT NULL)
       and t.pay_flag = '0';
  
    if v_countFee = 0 then
      ErrorMsg   := '该患者所选的订单号没有收费项目需要收费';
      ReturnCode := -1;
      ROLLBACK;
      return;
    end if;
  
    FOR cur_fee1 IN cur_fee(v_register.clinic_code) LOOP
      cur_fee1.invoice_no := v_invoiceNo;
      v_pubCost           := v_pubCost + cur_fee1.pub_cost;
      v_owmCost           := v_owmCost + cur_fee1.own_cost;
      v_payCost           := v_payCost + cur_fee1.pay_cost;
      if cur_fee1.drug_flag = '1' then
        begin
          v_windowsinfo := '门诊西药房发药窗口1';
          select SEQ_PHA_APPLYOUT_ID.Nextval into v_applyid from dual; --获取申请流水号
          INSERT INTO pha_com_applyout --出库申请
            (apply_number,
             dept_code,
             drug_dept_code,
             class3_meaning_code,
             group_code,
             drug_code,
             trade_name,
             batch_no,
             drug_type,
             drug_quality,
             specs,
             pack_unit,
             pack_qty,
             min_unit,
             show_flag,
             show_unit,
             retail_price,
             wholesale_price,
             purchase_price,
             apply_billcode,
             apply_opercode,
             apply_date,
             apply_state,
             apply_num,
             days,
             preout_flag,
             charge_flag,
             patient_id,
             patient_dept,
             druged_bill,
             druged_dept,
             druged_empl,
             druged_date,
             druged_num,
             dose_once,
             dose_unit,
             usage_code,
             use_name,
             dfq_freq,
             dfq_cexp,
             dose_model_code,
             order_type,
             mo_order,
             comb_no,
             exec_sqn,
             recipe_no,
             sequence_no,
             send_type,
             billclass_code,
             print_state,
             relieve_flag,
             relieve_code,
             print_empl,
             print_date,
             out_bill_code,
             valid_state,
             mark,
             cancel_empl,
             cancel_date,
             place_code,
             recipe_dept,
             recipe_oper,
             baby_flag,
             ext_flag,
             ext_flag1,
             compound_group,
             compound_flag,
             compound_exec,
             compound_oper,
             compound_date)
          values
            (v_applyid, --申请流水号
             cur_fee1.doct_dept, --申请部门编码（科室或者病区）
             cur_fee1.exec_dpcd, --发药部门编码
             'M1', --出库申请分类
             '', --批次号
             cur_fee1.item_code, --药品编码
             cur_fee1.item_name, --药品商品名
             '', --批号
             (select aa.drug_type
                from pha_com_baseinfo aa
               where aa.drug_code = cur_fee1.item_code), --药品类别
             cur_fee1.DRUG_QUALITY, --药品性质
             cur_fee1.specs, --规格
             (select aa.pack_unit
                from pha_com_baseinfo aa
               where aa.drug_code = cur_fee1.item_code), --包装单位
             cur_fee1.pack_qty, --包装数
             (select ts.min_unit
                from pha_com_baseinfo ts
               where ts.drug_code = cur_fee1.item_code), --最小单位
             '0', --显示的单位标记
             '', --显示的单位
             cur_fee1.unit_price, --零售价
             0, --批发价
             0, --购入价
             '', --申请单号
             v_HisOperNum, --申请人编码
             v_feedate, --申请日期
             '0', --申请状态 0申请，1核准（出库），2作废，3暂不摆药
             round(cur_fee1.qty / cur_fee1.days, 4), --申请出库量(每付的总数量)
             cur_fee1.days, --付数（草药）
             '1', --是否预扣库存：1是0否
             '1', --是否收费：0未收费，1已收费
             cur_fee1.clinic_code, --患者门诊号
             cur_fee1.doct_dept, --患者科室
             '', --摆药单号
             '', --摆药科室
             '', --摆药人
             to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --摆药日期
             0, --摆药数量
             cur_fee1.dose_once, --每次剂量
             cur_fee1.dose_unit, --剂量单位
             cur_fee1.usage_code, --用法代码
             cur_fee1.use_name, --用法名称
             cur_fee1.frequency_code, --频次代码
             cur_fee1.frequency_code, --频次名称
             cur_fee1.dose_model_code, --剂型编码
             '', --医嘱类型
             cur_fee1.mo_order, --医嘱流水号
             cur_fee1.comb_no, --组合序号
             '0', --执行单流水号
             cur_fee1.recipe_no, --处方号
             cur_fee1.sequence_no, --处方内流水号
             '0', --发送类型（1集中发送，2临时发送）
             '', --摆药单分类代码
             '', --打印状态（0未打印，1已打印）
             '', --门诊调剂标记1是0否
             '', --调剂单流水号
             '', --操作员（打印人）
             to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --操作日期（打印时间）
             '0', --出库单号（退库申请时，保存出库时对应的记录）
             '1', --有效状态（0有效，1无效，2不摆药）
             '', --备注
             '', --取消操作员
             to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --取消时间(用药时间),
             '', --货位号
             '', --开方科室
             '', --开方医生
             '0', --是否婴儿 1 是 0 否
             '', --扩展字段
             '', --扩展字段1
             '', --批次流水号,根据医嘱执行时间及组合号赋值
             '0', --是否需配液 ‘1’ 是 0 否
             '0', --是否配液已执行 1 是 0 否
             '', --配液执行人
             to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss') --配液时间
             );
        EXCEPTION
          WHEN OTHERS THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := '插入PHA_COM_APPLYOUT表失败!' || SQLERRM;
            RETURN;
        end;
        begin
          INSERT INTO PHA_STO_PREOUTSTORE --药品预扣表
          values
            (v_applyid, --申请流水号
             cur_fee1.exec_dpcd, --发药部门编码
             'M1', --出库申请分类
             cur_fee1.item_code, --药品编码
             cur_fee1.item_name, --药品商品名
             cur_fee1.specs, --规格
             round(cur_fee1.qty / cur_fee1.days, 4), --申请出库量(每付的总数量)
             cur_fee1.days, --付数（草药）
             '', --申请人编码
             v_feedate, --申请日期
             cur_fee1.card_no, --患者编号
             '' --批次号
             );
        EXCEPTION
          WHEN OTHERS THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := '插入PHA_STO_PREOUTSTORE表失败!' || SQLERRM;
            RETURN;
        end;
        begin
          select count(*)
            into v_count
            from PHA_STO_RECIPE t
           where t.recipe_no = cur_fee1.recipe_no;
          if v_count > 0 then
            update PHA_STO_RECIPE t
               set t.recipe_qty  = t.recipe_qty + 1,
                   t.recipe_cost = t.recipe_cost + cur_fee1.own_cost
             where t.recipe_no = cur_fee1.recipe_no;
          else
            INSERT INTO PHA_STO_RECIPE --处方调剂头表
            values
              (cur_fee1.exec_dpcd, --药房编码
               cur_fee1.RECIPE_NO, --处方号
               'M1', --出库申请分类
               '1', --交易类型,1正交易，2反交易
               '1', --处方状态: 0申请,1打印,2配药,3发药,4还药(当天未发的药品返回货价)
               cur_fee1.clinic_code, --门诊号
               cur_fee1.card_no, --病历卡号
               (select at.name
                  from com_patientinfo at
                 where at.card_no = cur_fee1.card_no), --患者姓名
               (select at.sex_code
                  from com_patientinfo at
                 where at.card_no = cur_fee1.card_no), --性别
               (select at.birthday
                  from com_patientinfo at
                 where at.card_no = cur_fee1.card_no), --年龄
               '01', --结算类别代码
               cur_fee1.doct_dept, --患者科室编码
               cur_fee1.reg_date, --挂号日期
               cur_fee1.doct_code, --开方医师
               cur_fee1.doct_dept, --开方医师所在科室
               decode(cur_fee1.exec_dpcd, '0403', '3435', '3433'),
               decode(cur_fee1.exec_dpcd, '0403', '3434', '3432'),
               v_HisOperNum, --收费人编码(申请人编码)
               v_feedate, --收费时间(申请时间)
               v_invoiceNo, --票据号
               cur_fee1.own_cost, --处方金额（零售金额）
               1, --处方中药品数量(中山一用品种数)
               0, --已配药的药品数量(中山一用品种数)
               '', --配药人
               cur_fee1.exec_dpcd, --配药科室
               to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --配药日期
               '', --发药人
               to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --发药时间
               cur_fee1.exec_dpcd, --发药科室
               '1', --有效状态：0有效，1无效
               '0', --退药改药0否1是
               '', --还药人
               to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --还药时间
               '', --取消操作员
               to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --取消日期
               'd', --备注
               2,
               '',
               '');
          end if;
        EXCEPTION
          WHEN OTHERS THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := '插入PHA_STO_RECIPE表失败!' || cur_fee1.recipe_no ||
                          SQLERRM;
            RETURN;
        end;
      end if;
      BEGIN
        UPDATE fin_opb_feedetail t --患者划价信息表
           SET t.pay_flag    = '1', --收费标志,0未,1已
               t.fee_cpcd    = '006688', --收费人
               t.fee_date    = v_feedate, --收费日期
               t.invoice_no  = v_invoiceNo,
               t.invoice_seq = v_invoiceseq
         WHERE t.recipe_no = cur_fee1.recipe_no --处方号
           AND t.trans_type = '1' --交易类型
           and t.sequence_no = cur_fee1.sequence_no
           and t.recipe_no = cur_fee1.recipe_no;
      EXCEPTION
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '更新门诊患者费用表失败!' || SQLERRM;
          RETURN;
      END;
      if cur_fee1.cost_source = '1' then
        /*  begin
          select m.charge_flag
            into v_paycode
            from met_ord_recipedetail m
           where m.sequence_no = cur_fee1.mo_order;
        
          if v_paycode = '1' then
            ErrorMsg   := '该患者已结算！请勿重复操作！';
            ReturnCode := -1;
            rollback;
            return;
          end if;
        end;*/
      
        BEGIN
        
          UPDATE met_ord_recipedetail t --患者划价信息表
             SET t.charge_flag = '1', --收费标志,0未,1已
                 t.charge_code = '006688', --收费人
                 t.charge_date = v_feedate, --收费日期
                 t.status      = '1'
           WHERE t.sequence_no = cur_fee1.mo_order --处方
             AND t.status = '0'; --交易类型
        EXCEPTION
          WHEN OTHERS THEN
            rollback;
            ReturnCode := -1;
            ErrorMsg   := '更新met_ord_recipedetail表失败!' || SQLERRM;
            RETURN;
        END;
      end if;
      if cur_fee1.drug_flag = '0' then
        select b.confirm_flag
          into v_confirm
          from fin_com_undruginfo b
         where b.item_code = cur_fee1.item_code;
        if v_confirm = '1' then
          begin
            if cur_fee1.package_code is null then
              --是否不是复合项目
              delete from met_tec_terminalapply t
               where t.mo_order = cur_fee1.mo_order
                 and t.ext_flag1 = '1'
                 and t.item_code = cur_fee1.item_code;
            else
              delete from met_tec_terminalapply t
               where t.mo_order = cur_fee1.mo_order
                 and t.ext_flag1 = '1'
                 and t.item_code = cur_fee1.package_code;
            end if;
            --插入终端确认表
            SELECT SEQ_MET_TEC_TERMINALAPPLY.Nextval
              into V_TERMINALAPPLYSeq
              FROM DUAL;
            INSERT INTO met_tec_terminalapply
            VALUES
              (V_TERMINALAPPLYSeq, --申请流水号[03]
               cur_fee1.clinic_code, --住院流水号/门诊号/体检号[04]
               (select a.name
                  from fin_opr_register a
                 where a.clinic_code = cur_fee1.clinic_code
                   and a.trans_type = '1'), --姓名[05]
               v_pactCode, --合同单位[06]
               cur_fee1.reg_dpcd, --申请部门编码（科室或者病区）[07]
               cur_fee1.exec_dpcd, --终端科室编码[08]
               cur_fee1.reg_dpcd, --门诊是挂号科室、住院是在院科室[09]
               cur_fee1.exec_dpcd, --发药部门编码[10]
               0, --更新库存的流水号(物资)[11]
               cur_fee1.doct_code, --开立医师代码[12]
               cur_fee1.recipe_no, --处方号[13]
               cur_fee1.sequence_no, --处方内项目流水号[14]
               cur_fee1.item_code, --项目代码[15]
               cur_fee1.item_name, --项目名称[16]
               cur_fee1.unit_price, --单价[17]
               cur_fee1.qty, --数量[18]
               cur_fee1.price_unit, --当前单位[19]
               cur_fee1.package_code, --组套代码[20]
               cur_fee1.package_name, --组套名称[21]
               cur_fee1.pub_cost + cur_fee1.pay_cost + cur_fee1.own_cost, --费用金额[22]
               '1', --项目状态（0 划价  1 批费 2 执行（药品发放））[23]
               0, --已确认数[24]
               '', --设备号[25]
               '1', --0 未收费 1门诊收费 2 扣门诊账户 3预收费团体体检 4 药品预审核
               '0', --新旧项目标识： 0 旧 1 新[27]
               '1', --1 有效  ,0无效
               '', --扩展标志2(收费方式0住院处直接收费,1护士站医嘱收费,2确认收费,3身份变更,4比例调整)[29]
               '', --备注[30]
               cur_fee1.mo_order, --医嘱流水号[31]
               '0', --医嘱执行单流水号[32]
               '006688', --操作员（插入申请单）[33]
               v_feedate, --操作时间（插入申请单）[34]
               '1', --患者类别：‘1’ 门诊|‘2’ 住院|‘3’ 急诊|‘4’ 体检  5 集体体检
               'M', --性别[36]
               to_date('0001/1/1 0:00:00', 'yyyy-mm-dd hh24:mi:ss'), --药品发放时间[37]
               '', --终端执行人编号[38]
               to_date('0001/1/1 0:00:00', 'yyyy-mm-dd hh24:mi:ss'), --终端执行时间[39]
               '0', --是否药品[40]（1：是/0：否）
               cur_fee1.card_no --就诊卡号
               );
          EXCEPTION
            WHEN OTHERS THEN
              rollback;
              ReturnCode := -1;
              ErrorMsg   := '插入终端申请表失败!' || SQLERRM;
              RETURN;
          end;
        end if;
      end if;
    
      --插入发票明细表
      BEGIN
        select b.fee_stat_cate, b.fee_stat_name
          into v_stateCode, v_stateName
          from fin_com_feecodestat b
         where b.report_code = 'MZ01'
           and b.fee_code = cur_fee1.fee_code;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ReturnCode := -1;
          ErrorMsg   := '找不到项目对应的统计类别!';
          rollback;
          RETURN;
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '查找项目对应的统计类别失败失败!' || SQLERRM;
          RETURN;
      END;
      begin
        select count(*)
          into v_invoiceCount
          from fin_opb_invoicedetail a
         where a.invoice_no = v_invoiceNo
           and a.invo_code = v_stateCode;
        if v_invoiceCount = 0 then
          insert into fin_opb_invoicedetail
          values
            (v_invoiceNo, --发票号[3]
             '1', --交易类型,1正,2反[4]
             to_number(v_stateCode), --发票内流水号[5]
             v_stateCode, --发票科目代码[6]
             v_stateName, --发票科目名称[7]
             cur_fee1.pub_cost, --可报效金额[8]
             cur_fee1.own_cost, --不可报效金额[9]
             cur_fee1.pay_cost, --自付金额[10]
             cur_fee1.exec_dpcd, --执行科室[11]
             cur_fee1.exec_dpnm, --执行科室名称[12]
             v_feedate, --操作时间[13]
             v_HisOperNum, --操作员[14]
             '0', --0未日结/1已日结[15]
             '', --日结标识号[16]
             '', --日结人[17]
             to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --日结时间[18]
             '1', --1正常，0作废，2重打，3注销[19]
             v_invoiceseq,
             0,
             0,
             0);
        else
          update fin_opb_invoicedetail a
             set a.own_cost = a.own_cost + cur_fee1.own_cost,
                 a.pub_cost = a.pub_cost + cur_fee1.pub_cost,
                 a.pay_cost = a.pay_cost + cur_fee1.pay_cost
           where a.invoice_no = v_invoiceNo
             and a.invo_code = v_stateCode;
        end if;
      Exception
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '查找项目对应的统计类别失败失败!' || SQLERRM;
          RETURN;
      end;
    end loop;
  
    --插入发票主表
    v_totalcost := v_pubCost + v_owmCost + v_payCost;
    if v_totalcost !=
       (nvl(ZFAmount, 0) + nvl(YBZHAmount, 0) + nvl(YBTCAmount, 0)) then
      rollback;
      ReturnCode := -1;
      ErrorMsg   := '收费总金额' || (nvl(ZFAmount, 0) + nvl(YBZHAmount, 0) +
                    nvl(YBTCAmount, 0)) || '与his收费总额' || v_totalcost ||
                    '不一致!';
      RETURN;
    end if;
    /* if nvl(YBZHAmount, 0) + nvl(YBTCAmount, 0) > 0 then
      v_pactCode    := '98';
      v_pactName    := '智慧人社';
      v_paykindCode := '02';
    end if;*/
    begin
      insert into fin_opb_invoiceinfo
      values
        (v_invoiceNo, --发票号
         '1', --交易类型,1正，2反
         (select b.card_no
            from fin_opr_register b
           where b.clinic_code = v_register.clinic_code
             and b.trans_type = '1'), --病历卡号
         (select b.reg_date
            from fin_opr_register b
           where b.clinic_code = v_register.clinic_code
             and b.trans_type = '1'), --挂号日期
         (select b.name
            from fin_opr_register b
           where b.clinic_code = v_register.clinic_code
             and b.trans_type = '1'), --患者姓名
         v_paykindCode, --结算类别代码
         v_pactCode, --合同单位代码
         v_pactName, --合同单位名称
         '', --个人编号
         '', --医疗类别
         v_totalcost, --总额
         nvl(YBZHAmount, 0), --可报效金额
         nvl(ZFAmount, 0), --不可报效金额
         nvl(YBZHAmount, 0), --自付金额
         '', --预留1
         '', --预留2
         '', --预留保存退费原因(需要统计)
         nvl(ZFAmount, 0), --实付金额
         v_HisOperNum, --结算人
         v_feedate, --结算时间
         '0', --0不是体检/1个人体检/2团体体检
         '1', --"0" 退费 "1" 有效 "2" 重打 "3" 注销
         '', --作废票据号
         '', --作废操作员
         to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --作废时间
         '', --0未核查/1已核查
         '', --核查人
         to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --核查时间
         '0', --0未日结/1已日结
         '', --日结标识号
         '', --日结人
         to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --日结时间
         v_invoiceseq, --发票序号，一次结算产生多张发票的combno
         '0', --扩展标志 1 自费 2 记帐 3 特殊
         v_register.clinic_code, --挂号流水号
         '', --实际发票打印号码
         v_windowsinfo, --本张发票发药窗口信息
         '0', --是否账户集中打印发票
         v_balanceComNo, --一次结算收费序号
         '', --发票重打qin
         '', --
         0);
    
    Exception
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '插入发票主表失败!';
        RETURN;
    end;
  
    --插入支付表
    /*    --if nvl(ZFAmount, 0) > 0 then
    select count(*)
      into v_paymodeNum
      from fin_opb_paymode p
     where p.invoice_no = v_invoiceNo;
    
    if v_paymodeNum > 0 then
      ReturnCode := -1;
      ErrorMsg   := '该发票已经支付过！请勿重复操作';
      rollback;
      return;
    end if;*/
    begin
      if payType is null or payType = '' then
        v_paymode := 'WX';
      elsif payType = '1' then
        v_paymode := 'WX';
      elsif payType = '2' then
        v_paymode := 'ZB';
      elsif payType = '3' then
        v_paymode := 'CD';
      else
        v_paymode := 'WX';
      end if;
      insert into fin_opb_paymode
      values
        (v_invoiceNo, --发票号[3]
         '1', --交易类型,1正，2反[4]
         '1', --交易流水号[5]
         decode(payType, '1', 'WX', '2', 'ZB', '3', 'CD', 'WX'), --支付方式[6]
         nvl(ZFAmount, 0), --应付金额[7]
         nvl(ZFAmount, 0), --实付金额[8]
         '', --开户银行代码[9]
         '', --开户银行名称[10]
         '', --账号[11]
         '', --pos机号[12]
         '', --支票号[13]
         v_HisOperNum, --结算人[14]
         sysdate, --结算时间[15]
         '0', --0未核查/1已核查[16]
         '', --核查人[17]
         to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --核查时间[18]
         '0', --0未日结/1已日结[19]
         '', --日结标识号[20]
         '', --日结人[21]
         '0', --0未对帐/1已对帐[22]
         '', --对帐人[23]
         to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --对帐时间[24]
         to_date('0001-1-1 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --日结时间[25]
         v_invoiceseq, --发票序号，一次结算产生多张发票的combno
         '1', --1正常，0作废，2重打，3注销
         '', --pos交易流水号发票组号
         v_balanceComNo);
    
    Exception
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '插入支付表失败!';
        RETURN;
    end;
    -- end if;
    --院内账户支付
    if v_paymode = 'YS' then
      begin
        select b.vacancy, b.account_no
          into v_balancecost, v_accountno
          from fin_opb_account b
         where b.card_no = v_register.card_no
           and b.state <> '2';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ReturnCode := -1;
          ErrorMsg   := '找不到可用账户，不能使用就诊卡支付!';
          rollback;
          RETURN;
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '查找院内账户信息失败!';
          RETURN;
      end;
      if v_balancecost < nvl(v_ZFAmount, 0) then
        ReturnCode := -1;
        ErrorMsg   := '院内账户余额不足，不能使用就诊卡支付!';
        ROLLBACK;
      end if;
      begin
        INSERT INTO fin_opb_accountrecord
          (SEQUENCE_NO, --交易流水号
           card_no, --病历卡号
           opertype, --操作类型0预交金1建帐户2停帐户3重启帐户4支付5退费入户
           money, --金额
           dept_code, --相关科室
           oper_code, --操作员
           oper_date, --操作时间
           remark, --备注
           valid, --是否有效0有效1无效
           vacancy, --交易后余额
           account_no, --帐号
           EMPOWER_CARDNO, --授权门诊卡号
           empower_name, --被授权人姓名
           name, --授权人姓名
           EMPOWER_COST, --授权金额
           INVOICE_TYPE) --发票类型
        VALUES
          (SEQ_FIN_OPB_ACCOUNTRECORD.Nextval, --交易流水号
           v_register.card_no, --病历卡号
           '4', --操作类型0预交金1建帐户2停帐户3重启帐户4支付5退费入户
           nvl(v_ZFAmount, 0), --金额
           fun_get_employee_dept(v_HisOperNum), --相关科室
           v_HisOperNum, --操作员
           sysdate, --操作时间
           v_invoiceNo, --备注
           '1', --是否有效0有效1无效
           v_balancecost - nvl(v_ZFAmount, 0), --交易后余额
           v_accountno, --帐号
           '', --授权门诊卡号
           '', --被授权人姓名
           '', --授权人姓名
           v_ZFAmount, --授权金额
           'C'); --发票类型
      Exception
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '插入账户交易记录表失败!';
          RETURN;
      end;
      begin
        --更新余额
        update fin_opb_account b
           set b.vacancy = b.vacancy - nvl(v_ZFAmount, 0)
         where b.account_no = v_accountno
           and b.state = '1';
      Exception
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '更新个人账户余额失败!' || SQLERRM;
          RETURN;
      end;
      /*begin
        update fin_opb_personaccountmoney b
           set b.vacancy = b.vacancy - nvl(ZFAmount, 0)
         where b.account_no = v_accountno
           and b.accounttype = '1';
      Exception
        WHEN OTHERS THEN
          rollback;
          ReturnCode := -1;
          ErrorMsg   := '更新个人账户余额失败!' || SQLERRM;
          RETURN;
      end;*/
    end if;
    commit;
    open ReturnSet for
      select '1' as "status", v_invoiceNo as "tiketNo" from dual;
    ReturnCode := 1;
    ErrorMsg   := '缴费成功!'; --,v_invoiceNo "invoiceNo"
  
  end PRC_OutpBillsPayedConfirm;

  --其他费用收费的接口
  --确认收费
  PROCEDURE PRC_OtherFeePayedConfirm(userId       IN VARCHAR2, --微信授权用户id
                                     phone        in varchar2, --手机号
                                     hospitalId   IN VARCHAR2, --小程序端医院编号
                                     deptId       IN VARCHAR2, --科室ID(病历本费需要传科室ID)
                                     projectType  IN VARCHAR2, --费用类型(21:病历本费,22:病例复印费,23:游泳费)
                                     projectPrice IN number, --项目费用
                                     payStatus    IN VARCHAR2, --支付状态(0:待支付，1:支付中，2:已支付，3:退款)
                                     payType      IN VARCHAR2, --支付方式(1:微信)
                                     payment      IN VARCHAR2, --支付渠道
                                     outTradeNo   IN VARCHAR2, --商户订单号
                                     wxTradeNo    IN VARCHAR2, --微信订单号
                                     createTime   IN date, --创建时间
                                     payTime      IN date, --支付时间
                                     ReturnSet    OUT cc_cursor,
                                     ReturnCode   OUT INTEGER,
                                     ErrorMsg     out varchar2) is
    v_Sex        varchar2(4);
    v_Name       varchar2(10);
    v_phone      varchar2(15);
    v_UserID     varchar2(30);
    v_HospitalID varchar2(30);
    v_Dept_ID    varchar2(10);
    v_FeeType    varchar2(2);
    v_totCost    number(10, 2);
    v_payStatus  varchar2(1);
    v_payType    varchar2(2);
    v_payment    varchar2(20);
    v_outTradeNO varchar2(30);
    v_wxTradeNO  varchar2(30);
    v_createTime date;
    v_payTime    date;
    v_otherfee   zjhis.fin_opb_otherfee%rowtype;
    v_count      integer;
    v_otherfeeID varchar2(20);
  
  begin
    --微信授权用户id
    if userId is null or userId = '' then
      ReturnCode := -1;
      ErrorMsg   := '微信授权用户id不得为空' || sqlerrm;
      return;
    else
      v_UserID := userId;
    end if;
  
    --小程序端医院编号
    if hospitalId is null or hospitalId = '' then
      ReturnCode := -1;
      ErrorMsg   := '小程序端医院编号不得为空' || sqlerrm;
      return;
    else
      v_HospitalID := hospitalId;
    end if;
  
    --科室ID(病历本费需要传科室ID)
    if deptId is null or deptId = '' then
      /* ReturnCode := -1;
      ErrorMsg   := '科室id不得为空' || sqlerrm;
      return;*/
      v_Dept_ID := '';
    else
      v_Dept_ID := deptId;
    end if;
  
    --费用金额
    if projectPrice is null or projectPrice = '' then
      ReturnCode := -1;
      ErrorMsg   := '费用金额不得为空' || sqlerrm;
      return;
    else
      v_totCost := projectPrice;
    end if;
    --费用类型(21:病历本费,22:病例复印费,23:游泳费)
    if projectType is null or projectType = '' then
      ReturnCode := -1;
      ErrorMsg   := '费用类型不得为空' || sqlerrm;
      return;
    else
      v_FeeType := projectType;
    end if;
  
    --支付状态(0:待支付，1:支付中，2:已支付，3:退款)
    if payStatus is null or payStatus = '' then
      ReturnCode := -1;
      ErrorMsg   := '支付状态不得为空' || sqlerrm;
      return;
    elsif payStatus <> '1' then
      ReturnCode := -1;
      ErrorMsg   := '支付状态不是已支付无法进行业务处理' || sqlerrm;
      return;
    else
      v_payStatus := payStatus;
    end if;
  
    --支付渠道
    if payment is null or payment = '' then
      ReturnCode := -1;
      ErrorMsg   := '支付渠道不得为空' || sqlerrm;
      return;
    else
      v_payment := payment;
    end if;
    --支付方式(1:微信)
    if payType is null or payType = '' then
      ReturnCode := -1;
      ErrorMsg   := '支付方式不得为空' || sqlerrm;
      return;
    else
      if payType = '1' then
        v_payType := 'WX';
      ELSIF payType = '2' then
        v_payType := 'ZB';
      ELSE
        v_payType := 'WX';
      end if;
    end if;
  
    --支付类型
    if payment is null or payment = '' then
      ReturnCode := -1;
      ErrorMsg   := '支付类型不得为空' || sqlerrm;
      return;
    else
      v_payment := payment;
    end if;
    --商户订单号
    if outTradeNo is null or outTradeNo = '' then
      ReturnCode := -1;
      ErrorMsg   := '商户订单号不得为空' || sqlerrm;
      return;
    else
      v_outTradeNO := outTradeNo;
    end if;
  
    --微信订单号
    if wxTradeNo is null or outTradeNo = '' then
      ReturnCode := -1;
      ErrorMsg   := '微信订单号不得为空' || sqlerrm;
      return;
    else
      v_wxTradeNO := wxTradeNo;
    end if;
  
    --创建订单时间
    if createTime is null or createTime = '' then
      v_createTime := sysdate;
    else
      v_createTime := createTime;
    end if;
  
    --支付时间
    if payTime is null or payTime = '' then
      v_payTime := sysdate;
    else
      v_payTime := payTime;
    end if;
  
    --电话号码
    if phone is null or phone = '' then
      v_phone := '';
    else
      v_phone := phone;
    end if;
  
    begin
      select count(*)
        into v_count
        from zjhis.fin_opb_otherfee o
       where o.user_id = v_UserID
         and o.valid_flag = '1'
         and o.status = '1'
         and o.paytime = sysdate;
    exception
      WHEN NO_DATA_FOUND THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '其他费用信息表(fin_opb_otherfee)失败!';
        RETURN;
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '检索其他费用信息表(fin_opb_otherfee)时出错!' || SQLERRM;
        RETURN;
    end;
  
    if v_count > 0 then
      rollback;
      ReturnCode := -1;
      ErrorMsg   := '该订单已支付，请检查！！' || SQLERRM;
      return;
    end if;
    begin
      SELECT lpad(zjhis.seq_fin_opb_otherfeeid.nextval, 12, '0')
        into v_otherfeeID
        from dual;
    
      insert into zjhis.fin_opb_otherfee f
        (id, --其他费用表的主键（唯一） 
         patient_no, --门诊号/住院号 
         card_no, --病例卡号 
         user_id, -- 微信端授权的用户id 
         name, --姓名 
         sex, --性别 
         phone, --年龄 
         fee_type, --费用类型(21:病历本费,22:病例复印费,23:游泳费) 
         fee_name, --费用名称 
         transtype, --交易类型1 正交易 2 反交易 
         qty, --数量
         tot_cost, --费用金额 
         own_cost, --自付金额 
         pay_cost, --账户支付金额 
         pub_cost, --统筹支付金额 
         dept_code, --科室id(病历本费需要传科室id) 
         dept_name, --科室名称 
         hospitalid, --小程序端医院编号 
         paymode, --支付方式（wx 微信支付 zb 支付宝 默认微信） 
         order_no, --商户订单号
         wxtrade, --微信订单号 
         pay_qd, --微信的支付渠道 
         ordertime, --提交订单时间 
         paytime, --支付时间 
         quittime, --退费时间 
         status, --支付状态0 待支付 1 已支付 2 已退费 
         valid_flag, --有效性 1 有效 0 无效 
         oper_code, --操作者 
         oper_date --操作时间 
         )
      values
        (v_otherfeeID, --其他费用表的主键（唯一）
         '', --门诊号/住院号 
         '', --病例卡号
         v_UserID, --微信端授权的用户id 
         '', --姓名
         '', --性别
         v_phone, --年龄
         v_FeeType, --费用类型(21:病历本费,22:病例复印费,23:游泳费) 
         decode(v_FeeType,
                '21',
                '病历本费',
                '22',
                '病例复印费',
                '23',
                '游泳费',
                '其他费'), --费用名称
         '1', --交易类型1 正交易 2 反交易 
         '1', --数量
         v_totCost, --费用金额
         v_totCost, --自费
         0, --账户支付暂时默认0
         0, --统筹支付暂时默认0
         v_Dept_ID, --科室id(病历本费需要传科室id) 
         zjhis.fun_get_dept_name(v_Dept_ID), --科室名称
         v_HospitalID, --小程序端医院编号
         v_payType, --支付方式（wx 微信支付 zb 支付宝 默认微信） 
         v_outTradeNO, --商户订单号
         v_wxTradeNO, --微信订单号 
         v_payment, --微信的支付渠道 
         v_createTime, --提交订单时间 
         v_payTime, --支付时间
         to_date('0001-1-1 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), --退费时间
         v_payStatus, --支付状态
         '1',
         '006688',
         sysdate);
    exception
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '添加其他费用信息表(fin_opb_otherfee)时出错!' || SQLERRM;
        RETURN;
    end;
    commit;
  
    open ReturnSet for
      select v_otherfeeID "otherfeeId",
             v_phone      "phone",
             v_outTradeNO "outTradeNo",
             v_wxTradeNO  "wxTradeNo",
             v_payStatus  "status"
        from dual;
    ReturnCode := 1;
    ErrorMsg   := '消费成功！';
  
  end PRC_OtherFeePayedConfirm;

  --住院预交金收取
  procedure PRC_InPrepayPayedConfirm(InpatientNo in varchar2, --就诊流水号
                                     IdCard      in varchar2, --身份证号
                                     TransNo     in varchar2, --平台充值编号
                                     YJCost      in number, --预交金额
                                     YJTime      in date, --充值时间
                                     PayMode     in varchar2, --支付方式
                                     ReturnSet   out cc_cursor,
                                     ReturnCode  out integer, --取发票号返回错误信息
                                     ErrorMsg    out Varchar2) is
    --取发票号返回错误信息
    v_InviceNo    varchar(20); --发票号
    v_numCount    number; --用于判断输入住院号正确性
    v_OperCode    varchar(10); --操作员编码
    inpatientinfo fin_ipr_inmaininfo%rowtype; --住院患者信息
    v_YJye        number(10, 2); --预交款余额
    v_YJze        number(10, 2); --预交款总额
    v_PayMode     varchar2(10); --支付方式
  begin
    --1.判断参数
    if InpatientNo is null or InpatientNo = '' then
      ReturnCode := -1;
      ErrorMsg   := '住院号为空！';
      return;
    end if;
  
    if YJCost is null or YJCost <= 0 then
      ReturnCode := -1;
      ErrorMsg   := '住院预交金为空或为零';
      return;
    end if;
    --支付方式
    if PayMode is null or PayMode = '' then
      v_PayMode := 'WX';
    else
      if PayMode = '1' then
        v_PayMode := 'WX';
      ELSIF PayMode = '2' then
        v_PayMode := 'ZB';
      ELSIF PayMode = '3' then
        v_PayMode := 'DB';
      ELSE
        v_PayMode := 'WX';
      end if;
    end if;
    --2.判断输入住院号正确性
    begin
      select a.*
        into inpatientinfo
        from fin_ipr_inmaininfo a
       where a.patient_no = InpatientNo
         and a.idenno = IdCard
         and a.in_state in ('I', 'R')
         and rownum = 1
       order by a.in_date desc; --and a.in_state='I'
    exception
      when No_data_found then
        ReturnCode := -1;
        ErrorMsg   := '根据住院号' || InpatientNo || '未能查找到患者信息！';
        rollback;
        return;
      when others then
        ReturnCode := -1;
        ErrorMsg   := '根据住院号' || InpatientNo || '查找患者信息出错！' || SQLERRM;
        rollback;
        return;
      
        --======判断条件集中处理，比如是否封账，比如====
        --入参条件判断，包括充值金额，以及其他
        --封账判断
        if nvl(inpatientinfo.stop_acount, '0') = '1' then
          ReturnCode := -1;
          ErrorMsg   := '患者正在处于封账状态,暂时不能充值' || sqlerrm;
        end if;
        if length(inpatientinfo.idenno) = 0 then
          ReturnCode := -1;
          ErrorMsg   := '患者身份证号' || inpatientinfo.idenno ||
                        '为空,不能充值，需要充值请到住院处完善身份证信息';
        end if;
        if inpatientinfo.idenno != IdCard then
          ReturnCode := -1;
          ErrorMsg   := '患者身份证号' || inpatientinfo.idenno || '与入参不一致,不能充值';
        end if;
        --======判断条件集中处理结束====================
    
    end;
    v_OperCode := '006688';
  
    --2.取得交易发票号
    begin
      select zjhis.SEQ_WM_VIRTUAL_INVOICE.Nextval
        into v_InviceNo
        from dual;
      v_InviceNo := to_char(v_InviceNo);
    EXCEPTION
      WHEN OTHERS THEN
        ReturnCode := -1;
        ErrorMsg   := '获取预交金收据号码时出错!' || SQLERRM;
        RETURN;
    end;
  
    --3.插入预交金发票
  
    begin
      INSERT INTO zjhis.fin_ipb_inprepay --预交金表
        (inpatient_no, --住院流水号
         happen_no, --发生序号
         name, --姓名
         prepay_cost, --预交金额
         pay_way, --交付方式
         dept_code, --科室代码
         receipt_no, --预交金收据号码
         balance_date, --结算时间
         balance_state, --结算标志 0:未结算；1:已结算
         prepay_state, --预交金状态0:收取；1:作废;2:补打
         open_bank, --开户银行
         open_accounts, --开户帐户
         invoice_no, --结算发票号
         balance_no, --结算序号
         balance_opercode, --结算人代码
         report_flag, --上缴标志（1是 0否）
         fingrp_code, --财务组代码
         work_name, --工作单位
         trans_flag, --0非转押金，1转押金，2转押金已打印
         trans_code, --转押金结算员
         trans_date, --转押金时间
         postrans_no, --pos交易流水号或支票号或汇票号
         oper_code, --操作员
         oper_date, --操作日期
         check_no, --财务审核序号
         CHANGE_BALANCE_NO, --转押金时结算序号
         OLD_RECIPENO, -- 原票据号
         OPER_DEPTCODE, --操作员科室
         EXT_FLAG, --区分正常收费退费和结算召回处理
         PRINT_FLAG --打印标识
         )
        select a.inpatient_no, --住院流水号
               (select nvl(max(happen_no), 0) + 1
                  from zjhis.fin_ipb_inprepay
                 where inpatient_no = inpatientinfo.inpatient_no), --发生序号
               a.name, --姓名
               YJCost, --预交金额
               v_PayMode, --交付方式
               a.dept_code, --科室代码
               v_InviceNo, -- --预交金收据号码
               to_date('0001-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), --结算时间
               '0', --结算标志 0:未结算；1:已结算
               '0', --预交金状态0:收取；1:作废;2:补打
               '', --开户银行
               '', --开户帐户
               '', --结算发票号
               0, --结算序号
               '', --结算人代码
               '0', --上缴标志（1是 0否）
               '', --财务组代码
               '', --工作单位
               '0', --0非转押金，1转押金，2转押金已打印
               '', --转押金结算员
               to_date('0001-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), --转押金时间
               TransNo, --pos交易流水号或支票号或汇票号
               v_OperCode, --操作员
               sysdate, --操作日期
               '', --财务审核序号
               0, --转押金时结算序号
               '',
               '',
               '1',
               '1'
          from fin_ipr_inmaininfo a
         where a.inpatient_no = inpatientinfo.inpatient_no;
    
    exception
      when others then
        ReturnCode := -1;
        ErrorMsg   := '插入住院预交金表失败！';
        rollback;
        return;
    end;
    --------------------插入支付方式 TR_PHONE_PAYMODE  
    BEGIN
      INSERT INTO zjhis.TR_PHONE_PAYMODE
        (PATIENT_ID, --住院号流水号
         MODE_CODE, --支付方式编码
         MODE_NAME, --支付方式名称
         INVOICE_NO, --发票号
         VALID_FLAG, --0 退费    1交费   2作废
         OPER_CODE, --操作员代码
         OPER_DATE, --操作时间
         PAY_TYEP, --0  挂号  1交费
         ext1, --第三方交易流水号
         EXT2)
      VALUES
        (inpatientinfo.inpatient_no, --住院号流水号
         '4', --支付方式编码
         '智慧医院', --支付方式名称
         v_InviceNo, --发票号
         '1', --0 退费    1交费   2作废
         v_OperCode, --操作员代码
         sysdate, --操作时间
         '2', --0  挂号  1交费  2 住院预缴
         TransNo, --第三方交易流水号
         YJCost --预缴金额
         );
    EXCEPTION
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '插入tr_phone_paymode表失败!' || SQLERRM;
        RETURN;
    END;
    ---------------------------------------------------------------------------------------------
  
    --4.更新住院主表押金
  
    begin
    
      UPDATE zjhis.fin_ipr_inmaininfo
         SET prepay_cost = nvl(prepay_cost, 0) + YJCost,
             free_cost   = nvl(free_cost, 0) + YJCost
       WHERE inpatient_no = inpatientinfo.inpatient_no;
    exception
      when others then
        ReturnCode := -1;
        ErrorMsg   := '更新住院主表预交金失败！' || SQLERRM;
        rollback;
        return;
      
    end;
  
    begin
      --预交款余额
      select sum(g.prepay_cost)
        into v_YJye
        from zjhis.fin_ipb_inprepay g
       where g.inpatient_no = inpatientinfo.inpatient_no;
      --预交款总额
      select nvl(prepay_cost - item_cost - medicin_cost, 0)
        into v_YJze
        from (select f.inpatient_no huanzheid,
                     f.patient_no binganhao,
                     f.inpatient_no jiuzhenid,
                     f.idenno shenfenzh,
                     (select nvl(sum(t.tot_cost), 0)
                        from fin_ipb_itemlist t
                       where t.inpatient_no = f.inpatient_no) item_cost,
                     (select nvl(sum(t.tot_cost), 0)
                        from fin_ipb_medicinelist t
                       where t.inpatient_no = f.inpatient_no) medicin_cost,
                     (select sum(g.prepay_cost)
                        from fin_ipb_inprepay g
                       where g.inpatient_no = f.inpatient_no) prepay_cost
                from zjhis.fin_ipr_inmaininfo f
               WHERE f.inpatient_no = inpatientinfo.inpatient_no);
      --select prepay_cost into yujiaokze  from fin_ipr_inmaininfo WHERE inpatient_no = jiuzhenid;
      --select (prepay_cost-tot_cost) into yujiaokye from fin_ipr_inmaininfo WHERE inpatient_no = jiuzhenid;
    end;
    commit;
    ReturnCode := 1;
    ErrorMsg   := '住院预交金成功';
    open ReturnSet for
      select v_InviceNo "invoiceNo",
             YJCost     "PrepayCost",
             YJTime     "PrepayDate",
             v_YJye     "PrepayYE",
             v_YJze     "PrepayTotal"
        from dual;
  end PRC_InPrepayPayedConfirm;

  --查询住院预交金余额 1、查询预交金余额2、查询预交金记录
  procedure PRC_QUERYPREPAY(PatientNo   in varchar2,
                            patientName in varchar2,
                            IdCard      in varchar2,
                            Phone       in varchar2,
                            startTime   in varchar2,
                            endTime     in varchar2,
                            bizType     in varchar2,
                            page        in integer,
                            pageSize    in integer,
                            ReturnSet   out cc_cursor,
                            ReturnCode  out integer,
                            ErrorMsg    out varchar2,
                            pageCount   out integer) is
    v_InpatientNo varchar2(20);
    v_patientNo   varchar2(15);
    v_StartTime   date;
    v_EndTime     date;
    v_patientName varchar2(30);
    v_IdCard      varchar2(30);
    v_Phone       varchar2(15);
    v_Count       integer;
  begin
  
    if bizType = '' or bizType is null then
      ErrorMsg   := '业务号不得为空！';
      ReturnCode := -1;
      pageCount  := 0;
      return;
    
    end if;
  
    if startTime = '' or startTime is null then
      v_StartTime := sysdate;
    else
      v_StartTime := to_date(startTime, 'yyyy-mm-dd hh24:mi:ss');
    end if;
  
    if endTime = '' or endTime is null then
      v_EndTime := sysdate + 1;
    else
      v_EndTime := to_date(endTime, 'yyyy-mm-dd hh24:mi:ss');
    end if;
  
    if bizType = '1' then
      if IdCard = '' or IdCard is null then
        ErrorMsg   := '患者身份证号不得为空！';
        ReturnCode := -1;
        pageCount  := 0;
        return;
      end if;
    
      if Phone = '' or Phone is null then
        ErrorMsg   := '患者手机号不得为空！';
        ReturnCode := -1;
        pageCount  := 0;
        return;
      end if;
      if PatientNo = '' or PatientNo is null then
        ErrorMsg   := '住院号不得为空！';
        ReturnCode := -1;
        pageCount  := 0;
        return;
      else
        v_patientNo := PatientNo;
      end if;
    
      begin
        select i.inpatient_no
          into v_InpatientNo
          from fin_ipr_inmaininfo i
         where i.patient_no = v_patientNo
           and i.idenno = IdCard
           and i.home_tel = Phone
           and i.in_state in ('I', 'R')
           and rownum = 1;
      exception
        when NO_DATA_FOUND then
          ErrorMsg   := '住院号为' || v_patientNo || '身份验证失败请重新输入';
          ReturnCode := -1;
          pageCount  := 0;
          return;
        when others then
          ErrorMsg   := '住院号为' || v_patientNo || '身份验证失败请重新输入';
          ReturnCode := -1;
          pageCount  := 0;
          return;
      end;
      select nvl(count(*), 0)
        into v_Count
        from fin_ipb_inprepay p
       where p.inpatient_no = v_InpatientNo
         and p.prepay_state = '0';
      open ReturnSet for
        select to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') as "queryTime",
               p.name as "patientName",
               p.inpatient_no as "hospitalNum",
               IdCard as "idCardNo",
               (select sum(nvl(m.prepay_cost, 0))
                  from fin_ipb_inprepay m
                 where m.inpatient_no = p.inpatient_no) as "balanceMoney"
          from fin_ipb_inprepay p
         where p.inpatient_no = v_InpatientNo
           and p.prepay_state = '0';
      pageCount := v_Count;
    elsif bizType = '2' then
      if IdCard = '' or IdCard is null then
        v_IdCard := 'ALL';
      else
        v_IdCard := IdCard;
      end if;
    
      if Phone = '' or Phone is null then
        v_Phone := 'ALL';
      else
        v_Phone := Phone;
      end if;
    
      if PatientNo = '' or PatientNo is null then
        v_InpatientNo := 'ALL';
      else
        v_InpatientNo := PatientNo;
      end if;
      if page is null or page <= 0 then
        ErrorMsg   := '分页数必须大于0并且不得为空';
        ReturnCode := -1;
        pageCount  := 0;
        return;
      end if;
    
      if pageSize is null or pageSize <= 0 then
        ErrorMsg   := '分页行数必须大于0并且不得为空';
        ReturnCode := -1;
        pageCount  := 0;
        return;
      end if;
      if patientName = '' or patientName is null then
        v_patientName := 'ALL';
      ELSE
        v_patientName := patientName;
      end if;
      /*   if v_patientNo <> 'ALL' THEN
        begin
        
          select b.inpatient_no
            into v_InpatientNo
            from (select i.inpatient_no
                    from fin_ipr_inmaininfo i
                   where i.patient_no = v_patientNo
                     and (i.idenno = v_IdCard or 'ALL' = v_IdCard)
                     and (i.home_tel = v_Phone or 'ALL' = v_Phone)
                  -- and i.in_state in ('I', 'R')
                   order by i.in_date desc) b
           where rownum = 1;
        exception
          when NO_DATA_FOUND then
            ErrorMsg   := '住院号为' || v_patientNo || '没有找到住院数据！';
            ReturnCode := -1;
            return;
          when others then
            ErrorMsg   := '住院号为' || v_patientNo || '身份验证失败请重新输入' || sqlerrm;
            ReturnCode := -1;
            return;
        end;
      END IF;*/
      select count(*)
        into v_Count
        from fin_ipb_inprepay p
       where p.inpatient_no in
             (select m.inpatient_no
                from fin_ipr_inmaininfo m
               where (m.inpatient_no = v_InpatientNo OR
                     'ALL' = v_InpatientNo)
                 and (m.idenno = v_IdCard or 'ALL' = v_IdCard)
                 AND (m.home_tel = v_Phone or 'ALL' = v_Phone))
            
         AND (p.name = v_patientName or 'ALL' = v_patientName)
         and p.oper_date >= v_StartTime
         and p.oper_date < v_EndTime
         and p.prepay_state = '0';
      open ReturnSet for
        select bb."serialNo"          as "serialNo",
               bb."wxOrderNo"         as "wxOrderNo",
               bb."receiptNo"         as "receiptNo",
               bb."hospitalizationNo" as "hospitalizationNo",
               bb."patientName"       as "patientName",
               bb."advanceAmount"     as "advanceAmount",
               bb."invoiceNo"         as "invoiceNo",
               bb."idCard"            as "idCard",
               bb."payTime"           as "payTime",
               bb."payStatus"         as "payStatus",
               bb."payMethod"         as "payMethod",
               bb."payAccountNo"      as "payAccountNo" --,
        -- v_Count                as "count"
          from (select rownum as "serialNo",
                       p.postrans_no as "wxOrderNo",
                       p.receipt_no as "receiptNo",
                       p.inpatient_no as "hospitalizationNo",
                       p.name as "patientName",
                       p.prepay_cost as "advanceAmount",
                       p.invoice_no as "invoiceNo",
                       (select s.idenno
                          from fin_ipr_inmaininfo s
                         where s.inpatient_no = p.inpatient_no) as "idCard",
                       to_char(p.oper_date, 'yyyy-mm-dd hh24:mi:ss') as "payTime",
                       p.prepay_state as "payStatus",
                       p.pay_way as "payMethod",
                       '' as "payAccountNo"
                  from fin_ipb_inprepay p
                 where p.inpatient_no in
                       (select m.inpatient_no
                          from fin_ipr_inmaininfo m
                         where (m.inpatient_no = v_InpatientNo OR
                               'ALL' = v_InpatientNo)
                           and (m.idenno = v_IdCard or 'ALL' = v_IdCard)
                           AND (m.home_tel = v_Phone or 'ALL' = v_Phone))
                   AND (p.name = v_patientName or 'ALL' = v_patientName)
                   and p.oper_date >= v_StartTime
                   and p.oper_date < v_EndTime
                   and p.prepay_state = '0') bb
         where bb."serialNo" between (page - 1) * pageSize + 1 and
               Page * pageSize;
    end if;
    ErrorMsg   := '查询成功！';
    pageCount  := v_Count;
    ReturnCode := 1;
  end PRC_QUERYPREPAY;
  /*
  {
    "idCardNo": "42272319540118074X",
    "hospitalNum": "00000227088",
    "patientName": "张运芹",
    "phone": "13094186957",
    "type": "1"
  }
  
  */
  --查询住院信息 bizType 1、住院病历复印邮寄-核验信息接口返回bool值、2、获取患者住院基本信息
  procedure PRC_QUERYINMAININFO(PatientNo   in varchar2,
                                patientName in varchar2,
                                IdCard      in varchar2,
                                Phone       in varchar2,
                                bizType     in varchar2,
                                ReturnSet   out cc_cursor,
                                ReturnCode  out integer,
                                ErrorMsg    out varchar2) is
    v_InpatientNo varchar2(20);
    v_patientNo   varchar2(15);
    v_count       integer;
    v_inmaininfo  fin_ipr_inmaininfo%rowtype;
  begin
    if PatientNo = '' or PatientNo is null then
      ErrorMsg   := '住院号不得为空！';
      ReturnCode := -1;
      return;
    else
      v_patientNo := PatientNo;
    end if;
  
    if patientName = '' or patientName is null then
      ErrorMsg   := '患者姓名不得为空！';
      ReturnCode := -1;
      return;
    
    end if;
  
    if bizType = '' or bizType is null then
      ErrorMsg   := '业务号不得为空！';
      ReturnCode := -1;
      return;
    
    end if;
  
    if IdCard = '' or IdCard is null then
      ErrorMsg   := '患者身份证号不得为空！';
      ReturnCode := -1;
      return;
    end if;
  
    if Phone = '' or Phone is null then
      ErrorMsg   := '患者手机号不得为空！';
      ReturnCode := -1;
      return;
    end if;
  
    if bizType = '1' then
      begin
        select *
          into v_inmaininfo
          from fin_ipr_inmaininfo i
         where i.patient_no = v_patientNo
           and i.name = patientName
           and i.idenno = IdCard
           and rownum = 1
         order by i.in_date desc;
      exception
        when NO_DATA_FOUND then
          open ReturnSet for
            select 'False' as "isIn" from dual;
          ErrorMsg   := '住院号为' || v_patientNo || '身份验证失败请重新输入';
          ReturnCode := -1;
          return;
        when others then
          ErrorMsg   := '住院号为' || v_patientNo || '身份验证失败请重新输入';
          ReturnCode := -1;
          return;
      end;
      /*
      and i.home_tel = Phone
           and i.out_date > trunc(sysdate) - 15
           and i.in_state in ('I', 'R')*/
      if v_inmaininfo.home_tel <> Phone then
        open ReturnSet for
          select 'False' as "isIn" from dual;
        ErrorMsg   := '患者手机号与HIS中存储的手机号不一致！';
        ReturnCode := -1;
        return;
      end if;
    
      if v_inmaininfo.in_state in ('I', 'R') THEN
        open ReturnSet for
          select 'False' as "isIn" from dual;
        ErrorMsg   := '在院患者无法邮寄病历本！';
        ReturnCode := -1;
        return;
      end if;
    
      if v_inmaininfo.out_date > trunc(sysdate) - 15 then
        open ReturnSet for
          select 'False' as "isIn" from dual;
        ErrorMsg   := '出院15天才能邮寄病历本！';
        ReturnCode := -1;
        return;
      end if;
      open ReturnSet for
        select 'True' as "isIn" from dual;
    elsif bizType = '2' then
      begin
        open ReturnSet for
          select i.home_tel as "phone",
                 i.idenno as "idCardNo",
                 '004004' as "hospitalId",
                 '枝江市人民医院' as "hospitalName",
                 i.name as "patientName",
                 decode(i.sex_code, 'F', '女', 'M', '男', '其他') as "sex",
                 i.card_no as "cardNo",
                 i.dept_code as "deptId",
                 i.dept_name as "deptName",
                 i.inpatient_no as "inpatientNo",
                 to_char(i.in_date, 'yyyy-mm-dd hh24:mi:ss') as "admissionTime",
                 to_char(i.out_date, 'yyyy-mm-dd hh24:mi:ss') as "dischargeTime"
          
            from fin_ipr_inmaininfo i
           where i.patient_no = v_patientNo
             and i.name = patientName
             and i.idenno = IdCard
             and i.home_tel = Phone
             and i.in_state in ('O')
             and rownum = 1
           order by i.out_date desc;
      exception
      
        when NO_DATA_FOUND then
          open ReturnSet for
            select 'False' as "isIn" from dual;
          ErrorMsg   := '住院号为' || v_patientNo || '身份验证失败请重新输入';
          ReturnCode := -1;
          return;
        when others then
          ErrorMsg   := '住院号为' || v_patientNo || '身份验证失败请重新输入';
          ReturnCode := -1;
          return;
      end;
    end if;
    ErrorMsg   := '查询成功！';
    ReturnCode := 1;
  end PRC_QUERYINMAININFO;

  --修改患者基本信息接口
  procedure PRC_UpdatePatientInfo(CardNO      IN VARCHAR2,
                                  patname     IN VARCHAR2,
                                  IdCard      IN VARCHAR2,
                                  phone       IN VARCHAR2,
                                  HomeAddress IN VARCHAR2,
                                  ReturnCode  OUT INTEGER,
                                  ReturnSet   OUT cc_cursor,
                                  ErrorMsg    OUT VARCHAR2) IS
    V_phone       varchar2(20);
    v_HomeAddress varchar2(100);
    v_IDCard      varchar2(30);
    v_Count       integer;
    v_patientinfo zjhis.com_patientinfo%rowtype;
    v_patname     varchar2(15);
  begin
    --判断就诊卡号是否为空
    if CardNO is null or CardNO = '' then
      ReturnCode := -1;
      ErrorMsg   := '就诊卡号不得为空';
      return;
    end if;
    --检查患者是否存在
    begin
      select count(*)
        into v_Count
        from zjhis.com_patientinfo p
       where p.card_no = CardNO;
    
      if v_Count < 1 then
        ReturnCode := -1;
        ErrorMsg   := '在系统中无法找到该患者的办卡信息';
        return;
      else
        select *
          into v_patientinfo
          from zjhis.com_patientinfo p
         where p.card_no = CardNO;
      end if;
    end;
    --判断手机号是否为空
    if phone is null or phone = '' then
      if v_patientinfo.linkman_tel = '' or
         v_patientinfo.linkman_tel is null then
        V_phone := v_patientinfo.home_tel;
      else
        V_phone := v_patientinfo.linkman_tel;
      end if;
    else
      V_phone := phone;
    end if;
    --判断患者姓名是否为空
    if patname is null or patname = '' then
      V_patname := v_patientinfo.name;
    else
      V_patname := patname;
    end if;
  
    --判断家庭住址
    if HomeAddress is null or HomeAddress = '' then
      v_HomeAddress := v_patientinfo.home;
    else
      v_HomeAddress := HomeAddress;
    
    end if;
    --修改患者基本信息
    begin
      update zjhis.com_patientinfo p
         set p.home_tel    = V_phone,
             p.linkman_tel = V_phone,
             p.home        = v_HomeAddress,
             p.name        = v_patname,
             p.oper_date   = sysdate
       where p.card_no = CardNO;
    exception
      when others then
        ReturnCode := -1;
        ErrorMsg   := '更新患者基本信息表失败！' || SQLERRM;
        rollback;
        return;
      
    end;
    commit;
    open ReturnSet for
      select p.card_no,
             p.name "name",
             p.idenno "IdCard",
             p.linkman_tel "phone",
             p.home "Address"
        from zjhis.com_patientinfo p
       where p.card_no = CardNO;
  
    ReturnCode := 1;
    ErrorMsg   := '修改患者基本信息成功！';
  
  end PRC_UpdatePatientInfo;

  --查询未来15天 科室排班信息
  --获取医生列表
  PROCEDURE PRC_DoctorQueryToWL15(deptId     IN VARCHAR2,
                                  hospitalId IN VARCHAR2,
                                  ResultSet  out cc_cursor,
                                  ReturnCode out integer,
                                  ErrorMsg   out VARCHAR2) is
    DeptCode varchar2(20);
  begin
  
    if deptId is null or deptId = '' then
      DeptCode := 'ALL';
    else
      DeptCode := deptId;
    end if;
  
    open ResultSet for
      select b.see_date "Date",
             b.doct_name "doctorName",
             b.doct_code "doctorId",
             (select name
                from com_dictionary
               where code = (select e.POSI_CODE
                               from com_employee e
                              where e.empl_code = b.doct_code)
                 and type = 'POSITION') "title",
             (select name
                from com_dictionary
               where code = (select e.levl_code
                               from com_employee e
                              where e.empl_code = b.doct_code)
                 and type = 'LEVEL') "major",
             fun_get_dept_name(b.dept_code) "deptName",
             b.dept_code "deptId",
             '' "appraise",
             '' "goodAt",
             '' "userPhoto",
             '' "subHospitalID",
             b.id "scheduleId",
             to_char(b.see_date, 'yyyy-mm-dd') "outpDate",
             b.noon_code "timeInterval",
             '' "level",
             (select d.DEPT_ADDRESS
                from COM_DEPARTMENT d
               where d.DEPT_CODE = b.DEPT_CODE) "location",
             '' "sectionType",
             '' "doctorDes",
             b.REGLEVL_CODE "clinicTypeId",
             b.REGLEVL_NAME "clinicTypeName",
             (select a.CHCK_FEE + a.DIAG_FEE
                from FIN_OPR_REGFEEONPACT a
               where a.PACT_CODE = '01'
                 and a.REGLEVL_CODE = b.REGLEVL_CODE) "clinicFee", --诊查费
             (select a.REG_FEE
                from FIN_OPR_REGFEEONPACT a
               where a.PACT_CODE = '01'
                 and a.REGLEVL_CODE = b.REGLEVL_CODE) "registrationFee", --挂号费
             to_char(b.reg_lmt) "registrationLimit", --限号数
             to_char(b.tel_lmt) "reserveLimit", --限预约号数
             to_char(b.reged) "registrationNum", --已挂数
             to_char(b.tel_reging) "reserveNum", --已约数
             b.valid_flag "validFlag", --停号标志 -1 停诊 0 未发布 1正常
             '' "stopFlag", --停诊类别1 停诊后有替诊医生 2 停诊后无替诊医生
             b.reason_name "stopReason", --停诊原因
             '' "doctorCode2", --替诊医生
             '' "doctorCodeName2", --替诊医生名称
             (select count(*)
                from fin_opr_register_pool a
               where a.SCHEMA_ID = b.id
                 and a.begin_time >= sysdate /*where c.SEE_DATE = to_char(DocTime, 'yyyy-mm-dd'))*/
                 and a.POOLNO_TYPE = '1'
                 and a.STATUS = '1') "PreCount"
        from fin_opr_schema b
       where (b.dept_code = DeptCode or 'ALL' = DeptCode)
         and b.valid_flag = '1'
         and b.see_date >= trunc(sysdate)
         and b.see_date <= trunc(sysdate + 15);
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  end PRC_DoctorQueryToWL15;

  --查询电子发票的数据 只查一个月
  PROCEDURE PRC_QueryEbillInvoiceInfo(PatientId  IN VARCHAR2,
                                      begindate  in varchar2,
                                      enddate    in varchar2,
                                      ResultSet  out cc_cursor,
                                      ReturnCode out integer,
                                      ErrorMsg   out VARCHAR2) is
    v_PatientId varchar2(20);
    v_BeginDate date;
    v_EndDate   date;
  begin
  
    if PatientId is null or PatientId = '' then
      ReturnCode := -1;
      ErrorMsg   := '门诊卡号不得为空';
      return;
    else
      v_PatientId := PatientId;
    end if;
  
    if begindate = '' or begindate is null then
      v_BeginDate := sysdate - 30;
    
    else
      v_BeginDate := to_date(begindate, 'yyyy-mm-dd hh24:mi:ss');
    end if;
  
    if enddate = '' or enddate is null then
      v_EndDate := sysdate - 30;
    
    else
      v_EndDate := to_date(enddate, 'yyyy-mm-dd hh24:mi:ss');
    end if;
    open ResultSet for
      select e.inpatient_no as "inpatientno",
             e.patient_no as "patientno",
             e.card_no as "cardno",
             e.hisinvoice_no as "hisinvoiceno",
             e.his_name as "hisname",
             replace(to_char(e.pictureurl),
                     'http://172.22.156.72:7001',
                     'https://api.lizhi.co') as "pictureurl",
             e.tot_cost as "totcost",
             e.oper_date as "operdate"
        from zjhis.fin_com_einvoicebill e
       where e.vaild_flag = '1'
         and e.cancel_flag = '1'
         and e.exe_flag = '1'
         and e.patient_no is not null
         and e.patient_no = v_PatientId
         and e.oper_date >= sysdate - 30
      union all
      select e.inpatient_no as "inpatientno",
             e.patient_no as "patientno",
             e.card_no as "cardno",
             e.hisinvoice_no as "hisinvoiceno",
             e.his_name as "hisname",
             replace(to_char(e.pictureurl),
                     'http://172.22.156.72:7001',
                     'https://api.lizhi.co') as "pictureurl",
             e.tot_cost as "totcost",
             e.oper_date as "operdate"
        from zjhis.fin_com_einvoicebill e
       where e.vaild_flag = '1'
         and e.cancel_flag = '1'
         and e.exe_flag = '1'
         and e.card_no is not null
         and e.card_no = v_PatientId
         and e.oper_date >= sysdate - 30;
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  end PRC_QueryEbillInvoiceInfo;

  --预约核酸检测
  procedure PRC_CHECKITEM_APPLY(CARD_NO     IN VARCHAR2,
                                Item_Code   IN VARCHAR2,
                                People_TYPE IN VARCHAR2,
                                PRE_DATE    IN VARCHAR2,
                                ResultSet   OUT cc_cursor,
                                ErrStr      OUT VARCHAR2,
                                ReturnCode  OUT INTEGER) IS
    V_CARDNO      VARCHAR2(20);
    vsee_type     VARCHAR2(2);
    v_clincNo     VARCHAR2(15);
    v_patientinfo com_patientinfo%rowtype;
    v_predate     date;
    v_ItemCode    varchar2(100);
    v_nooncode    varchar2(2);
    v_deptCode    varchar2(10) := '9026';
    v_doctCode    varchar2(10) := '000019';
    v_regLevel    varchar2(4) := '27';
    vVisit_no     integer;
    numT          integer;
    v_invoiceNo   varchar2(30);
    v_RecipeNO    varchar2(20);
    v_RecipeNum   integer := 1;
    v_undruginfo  fin_com_undruginfo%rowtype;
    v_execDept    varchar2(10) := '9026';
    v_register    fin_opr_register%rowtype;
    v_regCount    integer;
    v_PeopleType  varchar2(10);
    V_dictionary  com_dictionary%rowtype;
    cursor GetitemList(itemlist varchar2) IS
      SELECT *
        FROM fin_com_undruginfo t
       WHERE t.item_code in
             (SELECT TRIM(substr(txt,
                                 instr(txt, '|', 1, LEVEL) + 1,
                                 instr(txt, '|', 1, LEVEL + 1) -
                                 instr(txt, '|', 1, LEVEL) - 1)) AS file_name
                FROM (SELECT '|' || itemlist || '|' txt FROM dual)
              CONNECT BY LEVEL <= length(itemlist) -
                         length(REPLACE(itemlist, '|', '')) + 1);
    v_sumCost number(10, 2) := 0;
  BEGIN
  
    /*open ResultSet for
      select '1' from dual;
    ErrStr     := '测试';
    ReturnCode := -1;
    return;*/
    --卡号
    IF CARD_NO = '' OR CARD_NO IS NULL THEN
      ReturnCode := -1;
      ErrStr     := '卡号不得为空';
      return;
    else
      V_CARDNO := CARD_NO;
    end if;
    --项目编号
    if Item_Code = '' or Item_Code is null then
      ReturnCode := -1;
      ErrStr     := '项目编号不得为空';
      return;
    else
      v_ItemCode := Item_Code;
      if INSTR(v_ItemCode, 'F00000081301') > 0 then
        v_ItemCode := v_ItemCode || '|F00000073025';
      end if;
    end if;
    --项目信息
    /*   begin
      select *
        into v_undruginfo
        from fin_com_undruginfo d
       where d.item_code = v_ItemCode;
    Exception
      WHEN NO_DATA_FOUND THEN
        ErrStr     := '没有找到对应的项目';
        ReturnCode := -1;
        return;
      WHEN OTHERS THEN
        ErrStr     := '查询fin_com_undruginfo表中出现其他错误' || sqlerrm;
        ReturnCode := -1;
        return;
    end;*/
    --预约时间
    if PRE_DATE = '' or PRE_DATE is null then
      ReturnCode := -1;
      ErrStr     := '预约时间不得为空';
      return;
    else
      v_predate := TO_DATE(PRE_DATE, 'yyyy/mm/dd hh24:mi:ss');
    end if;
  
    --午别
    if to_number(to_char(v_predate, 'hh24')) <= 12 then
      v_nooncode := '1';
    elsif to_number(to_char(v_predate, 'hh24')) > 12 and
          to_number(to_char(v_predate, 'hh24')) < 18 then
      v_nooncode := '2';
    else
      v_nooncode := '1';
    end if;
  
    --13类人群
    if People_TYPE = '' or People_TYPE is null then
      ReturnCode := -1;
      ErrStr     := '13类人群不得为空！';
      return;
    ELSE
      v_PeopleType := People_TYPE;
    end if;
  
    --患者基本信息绑定
  
    select *
      into v_patientinfo
      from com_patientinfo c
     where c.card_no = V_CARDNO;
    --是否看诊
    vsee_type := '1';
    select count(*)
      into numT
      from fin_opr_seesequence a --挂号看诊序号表
     WHERE a.see_date = trunc(v_predate)
       AND a.see_type = vsee_type
       AND a.see_subject = v_doctCode
       AND a.noon_code = v_nooncode;
    --智慧医院不需要 普通号  仅支持挂号到医生
    /*    select count(*)
     into numALLT
     from fin_opr_seesequence a --挂号看诊序号表
    WHERE a.see_date = trunc(sysdate)
      AND a.see_type = '4'
      AND a.see_subject = 'ALL'
      AND a.noon_code = vnooncode;*/
    --看诊序号表 记录挂号的次数
  
    if numT = 0 then
      insert INTO fin_opr_seesequence --挂号看诊序号表
        (see_date, --看诊日期
         see_type, --看诊类型 1医生，2科室
         see_subject, --看诊科目，包括医生、科室
         reglevl_code, --挂号级别
         current_value, --当前序号
         noon_code) --午别
      VALUES
        (trunc(v_predate), --看诊日期
         vsee_type, --看诊类型 1医生，2科室
         v_doctCode, --看诊科目，包括医生、科室
         v_regLevel, --挂号级别
         '1', --当前序号
         v_nooncode);
    
    else
      UPDATE fin_opr_seesequence --挂号看诊序号表
         SET current_value = current_value + 1 --当前序号
       WHERE see_date = trunc(v_predate)
         AND see_type = vsee_type
         AND see_subject = v_DoctCode
         AND noon_code = v_nooncode;
    
    end if;
    BEGIN
      SELECT current_value + 1
        into vVisit_no --当前序号
        FROM fin_opr_seesequence --挂号看诊序号表
       WHERE see_date = trunc(v_predate)
         AND see_type = vsee_type
         AND see_subject = v_DoctCode
         AND noon_code = v_nooncode;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        rollback;
        ReturnCode := -1;
        ErrStr     := '挂号看诊序号表(fin_opr_seesequence)失败!';
        RETURN;
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrStr     := '检索挂号看诊序号表(fin_opr_seesequence)时出错!' || SQLERRM;
        RETURN;
    END;
    --智慧医院不需要 普通号  仅支持挂号到医生
    /* if numALLT = 0 then
      INSERT INTO fin_opr_seesequence --挂号看诊序号表
        (see_date, --看诊日期
         see_type, --看诊类型 1医生，2科室
         see_subject, --看诊科目，包括医生、科室
         reglevl_code, --挂号级别
         current_value, --当前序号
         noon_code) --午别
      VALUES
        (trunc(sysdate), --看诊日期
         '4', --看诊类型 1医生，2科室
         'ALL', --看诊科目，包括医生、科室
         v_RegLevl, --挂号级别
         '1', --当前序号
         v_nooncode);
    else
      UPDATE fin_opr_seesequence --挂号看诊序号表
         SET current_value = current_value + 1 --当前序号
       WHERE see_date = trunc(sysdate)
         AND see_type = '4'
         AND see_subject = 'ALL'
         AND noon_code = vnooncode;
    end if;
    BEGIN
      SELECT current_value
        into vVisitAll_no --当前序号
        FROM fin_opr_seesequence --挂号看诊序号表
       WHERE see_date = trunc(sysdate)
         AND see_type = '4'
         AND see_subject = 'ALL'
         AND noon_code = vnooncode;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := 'vVisitAll_no(fin_opr_seesequence)失败!';
        RETURN;
      WHEN OTHERS THEN
        rollback;
        ReturnCode := -1;
        ErrorMsg   := '检索vVisitAll_no(fin_opr_seesequence)时出错!' ||
                      SQLERRM;
        RETURN;
    END;*/
    begin
      select count(*)
        into v_regCount
        from fin_opr_register r
       where r.oper_date >= trunc(v_predate)
         and r.oper_date < trunc(v_predate) + 1
         and r.card_no = V_CARDNO
         and r.dept_code = v_deptCode
         and r.trans_type = '1'
         and not exists (select 1
                from fin_opr_register a
               where a.clinic_code = r.clinic_code
                 and a.trans_type = '2');
      open ResultSet for
        select v_regCount from dual;
      if v_regCount > 0 then
        select *
          into v_register
          from fin_opr_register r
         where r.reg_date >= trunc(v_predate)
           and r.reg_date < trunc(v_predate) + 1
           and r.card_no = V_CARDNO
           and r.dept_code = v_deptCode
           and rownum <= 1;
        v_clincNo := v_register.clinic_code;
      else
        begin
          --就诊流水号
          SELECT seq_fin_clinicno.nextval into v_clincNo FROM dual;
          --门诊挂号发票号
          select seq_fin_opb_invoice.Nextval into v_invoiceNo from dual;
          --新增挂号表
          INSERT INTO fin_opr_register a --挂号主表
            (clinic_code, --门诊号/发票号
             card_no, --就诊卡号
             reg_date, --挂号日期
             noon_code, --午别
             name, --姓名
             idenno, --身份证号
             sex_code, --性别
             birthday, --出生日
             paykind_code, --结算类别号
             paykind_name, --结算类别名称
             pact_code, --合同号
             pact_name, --合同单位名称
             mcard_no, --医疗证号
             reglevl_code, --挂号级别
             reglevl_name, --挂号级别名称
             dept_code, --科室号
             dept_name, --科室名称
             seeno, --看诊序号
             doct_code, --医师代号
             doct_name, --医师姓名
             see_date, --看诊日期
             ynregchrg, --挂号收费标志
             ynbook, --是否预约
             ynfr, --1初诊/2复诊
             --   append_flag ,--1加号/0正常
             reg_fee, --挂号费
             chck_fee, --检查费
             diag_fee, --诊察费
             oth_fee, --附加费
             own_cost, --自费金额
             pub_cost, --报销金额
             pay_cost, --自付金额
             valid_flag, --退号标志
             oper_code, --操作员代码
             ynsee, --是否看诊
             check_flag, --1未核查/2已核查
             rela_phone, --联系电话
             address, --地址
             trans_type, --交易类型
             card_type, --证件类型
             begin_time, --开始时间段
             end_time, --结束时间段
             cancel_opcd, --作废人
             cancel_date, --作废时间
             invoice_no,
             recipe_no,
             append_flag,
             order_no,
             schema_no,
             oper_date, --操作时间
             in_source,
             is_sendinhoscase,
             IS_ENCRYPTNAME,
             normalname,
             eco_cost,
             IS_Account,
             account_no,
             rec_id)
          VALUES
            (v_clincNo, --门诊号/发票号
             v_patientinfo.CARD_NO, --就诊卡号
             trunc(v_predate), --挂号日期
             v_nooncode, --午别
             v_patientinfo.name, --姓名
             v_patientinfo.idenno, --身份证号
             v_patientinfo.sex_code, --性别
             v_patientinfo.birthday, --出生日
             '01', --结算类别号
             '', --结算类别名称
             '01', --合同号
             '自费', --合同单位名称
             '', --医疗证号
             v_regLevel, --挂号级别
             (select d.name
                from com_dictionary d
               where d.type = 'RegLevel'
                 and d.code = v_regLevel), --挂号级别名称
             v_deptCode, --科室号
             fun_get_dept_name(v_deptCode), --科室名称
             vVisit_no, --看诊序号
             nvl(v_DoctCode, ''), --医师代号
             fun_get_empl_name(v_DoctCode), --医师姓名
             v_predate, --看诊日期
             '1', --挂号收费标志
             '0', --是否预约
             '1', --1初诊/2复诊
             -- '1',--1加号/0正常
             0, --挂号费
             0, --检查费
             0, --诊察费
             '0', --附加费
             0, --自费金额
             '0', --报销金额
             '0', --自付金额
             '1', --有效标志
             '006688', --操作员代码
             '1', --是否看诊
             '0', --1未核查/2已核查
             v_patientinfo.linkman_tel, --联系电话
             v_patientinfo.home, --地址
             '1', --交易类型
             '01', --证件类型
             v_predate, --开始时间
             v_predate + 1, --结束时间
             '', --作废人
             to_date('0001-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'),
             v_invoiceNo,
             '',
             '0',
             '1',
             '',
             v_predate,
             '1',
             '0',
             '0',
             '',
             '0',
             '0',
             '', --账号
             '');
        exception
          when others then
            ErrStr     := '挂号表添加失败' || sqlerrm;
            ReturnCode := -1;
            RETURN;
        end;
      end if;
    
    end;
  
    --插入核酸检测人员类别表
    begin
      select d.*
        into V_dictionary
        from com_dictionary d
       where d.type = 'HSJCRQFL'
         and d.code = v_PeopleType;
    
      insert into fin_opr_pre_ptype
        (clinic_code, --门诊流水号 
         type, --业务类别 ZHYY:智慧医院  
         people_type_code, --新冠核酸检测人群分类类别编码  
         people_type_name, --新冠核酸检测人群分类类别名称  
         ext_flag1, --扩展字段1 
         ext_flag2, --扩展字段2
         ext_flag3, --扩展字段3 
         oper_code,
         oper_date)
      values
        (v_clincNo,
         'ZHYY',
         V_dictionary.Code,
         V_dictionary.Name,
         '',
         '',
         '',
         '',
         v_predate);
    EXCEPTION
      WHEN OTHERS THEN
        ErrStr     := '插入fin_opr_pre_ptype核酸检测人员类别表失败' || sqlerrm;
        ReturnCode := -1;
        ROLLBACK;
        RETURN;
    end;
  
    --新增门诊费用详情表
    delete from zjhis.fin_opb_feedetail f
     where f.clinic_code = v_clincNo
       and f.pay_flag = '0';
  
    select zjhis.seq_opb_recipe_no.nextval into v_RecipeNO from dual;
    for item in GetitemList(v_ItemCode) loop
      begin
        v_sumCost := v_sumCost + item.unit_price;
        --获取处方内部流水号
        BEGIN
          select max(f.sequence_no) + 1
            into v_RecipeNum
            from fin_opb_feedetail f
           where f.recipe_no = v_RecipeNO;
        Exception
          WHEN NO_DATA_FOUND THEN
            v_RecipeNum := 1;
          WHEN OTHERS THEN
            v_RecipeNum := 1;
        END;
        insert into fin_opb_feedetail f
          (recipe_no, --处方号[3] 
           sequence_no, --处方内项目流水号[4] 
           trans_type, --交易类型,1正交易，2反交易[5] 
           clinic_code, --门诊号[6] 
           card_no, --病历卡号[7] 
           reg_date, --挂号日期[8] 
           reg_dpcd, --开单科室[9] 
           doct_code, --开方医师[10] 
           doct_dept, --开方医师所在科室[11] 
           item_code, --项目代码[12] 
           item_name, --项目名称[13] 
           drug_flag, --1药品/0非要[14] 
           specs, --规格[15] 
           self_made, --自制药标志[16] 
           drug_quality, --药品性质，麻药，普药[17] 
           dose_model_code, --剂型[18] 
           fee_code, --最小费用代码[19] 
           class_code, --系统类别[20] 
           unit_price, --单价[21] 
           qty, --数量[22] 
           days, --草药的付数，其他药品为1[23] 
           frequency_code, --频次代码[24] 
           usage_code, --用法代码[25] 
           use_name, --用法名称[26] 
           inject_number, --院内注射次数[27] 
           emc_flag, --加急标记:1普通/2加急[28] 
           lab_type, --样本类型[29] 
           check_body, --检体[30] 
           dose_once, --每次用量[31] 
           dose_unit, --每次用量单位[32] 
           base_dose, --基本剂量[33] 
           pack_qty, --包装数量[34] 
           price_unit, --计价单位[35] 
           pub_cost, --可报效金额[36] 
           pay_cost, --自付金额[37] 
           own_cost, --现金金额[38] 
           exec_dpcd, --执行科室代码[39] 
           exec_dpnm, --执行科室名称[40] 
           center_code, --医保中心项目代码[41] 
           item_grade, --项目等级，1甲类，2乙类，3丙类[42] 
           main_drug, --主药标志[43] 
           comb_no, --组合号[44] 
           oper_code, --划价人[45] 
           oper_date, --划价时间[46] 
           pay_flag, --0划价 1收费 3预收费团体体检 4 药品预审核 
           cancel_flag, --0退费，1正常，2重打，3注销[48] 
           fee_cpcd, --收费员代码[49] 
           fee_date, --收费日期[50] 
           invoice_no, --票据号[51] 
           invo_code, --发票科目代码[52] 
           invo_sequence, --发票内流水号[53] 
           confirm_flag, --0未确认/1确认[54] 
           confirm_code, --确认人[55] 
           confirm_dept, --确认科室[56] 
           confirm_date, --确认时间[57] 
           eco_cost, --优惠金额[58] 
           invoice_seq, --发票序号，一次结算产生多张发票的combno 
           new_itemrate, --新项目比例 
           old_itemrate, --原项目比例 
           ext_flag, --扩展标志 特殊项目标志 1 0 非 
           ext_flag1, --0 正常/1个人体检/2 集体体检(暂用于门诊病历标志1为打印，空为未打印) 
           ext_flag2, --日结标志：0：未日结/1：已日结 
           ext_flag3, --1 包装 单位 0, 最小单位 
           package_code, --复合项目代码 
           package_name, --复合项目名称 
           noback_num, --可退数量 
           confirm_num, --确认数量 
           confirm_inject, --已确认院注次数 
           mo_order, --医嘱项目流水号或者体检项目流水号 
           sample_id, --条码号 
           recipe_seq, --收费序列 
           over_cost, --超标金额 
           excess_cost, --药品超标金额 
           drug_owncost, --自费药金额 
           cost_source, --费用来源 0 操作员 1 医嘱 2 终端 3 体检 
           subjob_flag, --附材标志 
           account_flag, --0没有扣账户 1 已经扣账户 
           update_sequenceno, --更新库存的流水号(物资) 
           account_no) --账户患者消费账号 )
        VALUES
          (v_RecipeNO, --处方号[3] 
           nvl(v_RecipeNum, 1), --处方内项目流水号[4] 
           '1', --交易类型,1正交易，2反交易[5] 
           v_clincNo, --门诊号[6] 
           v_patientinfo.card_no, --病历卡号[7] 
           v_predate, --挂号日期[8] 
           v_deptCode, --开单科室[9] 
           v_doctCode, --开方医师[10] 
           v_deptCode, --开方医师所在科室[11] 
           item.item_code, --项目代码[12] 
           item.item_name, --项目名称[13] 
           '0', --1药品/0非要[14] 
           '', --规格[15] 
           '', --自制药标志[16] 
           '', --药品性质，麻药，普药[17] 
           '', --剂型[18] 
           item.fee_code, --最小费用代码[19] 
           item.sys_class, --系统类别[20] 
           item.unit_price, --单价[21] 
           1, --数量[22] 
           1, --草药的付数，其他药品为1[23] 
           '', --频次代码[24] 
           '', --用法代码[25] 
           '', --用法名称[26] 
           0, --院内注射次数[27] 
           '', --加急标记:1普通/2加急[28] 
           '', --样本类型[29] 
           '', --检体[30] 
           0, --每次用量[31] 
           '', --每次用量单位[32] 
           null, --基本剂量[33] 
           1, --包装数量[34] 
           '次', --计价单位[35] 
           0, --可报效金额[36] 
           0, --自付金额[37] 
           item.unit_price, --现金金额[38] 
           nvl(item.exedept_code, v_execDept), --执行科室代码[39] 
           zjhis.fun_get_dept_name(nvl(item.exedept_code, v_execDept)), --执行科室名称[40] 
           '', --医保中心项目代码[41] 
           '', --项目等级，1甲类，2乙类，3丙类[42] 
           '', --主药标志[43] 
           '', --组合号[44] 
           '006688', --划价人[45] 
           v_predate, --划价时间[46] 
           '0', --0划价 1收费 3预收费团体体检 4 药品预审核 
           '1', --0退费，1正常，2重打，3注销[48] 
           '', --收费员代码[49] 
           to_date('0001-01-01', 'yyyy-mm-dd'), --收费日期[50] 
           '', --票据号[51] 
           '', --发票科目代码[52] 
           null, --发票内流水号[53] 
           '0', --0未确认/1确认[54] 
           '', --确认人[55] 
           '', --确认科室[56] 
           to_date('0001-01-01 00:00:00', 'yyyy-mm-dd HH24:mi:ss'), --确认时间[57] 
           0, --优惠金额[58] 
           0, --发票序号，一次结算产生多张发票的combno 
           null, --新项目比例 
           null, --原项目比例 
           '0', --扩展标志 特殊项目标志 1 0 非 
           '0', --0 正常/1个人体检/2 集体体检(暂用于门诊病历标志1为打印，空为未打印) 
           '0', --日结标志：0：未日结/1：已日结 
           '', --1 包装 单位 0, 最小单位 
           '', --复合项目代码 
           '', --复合项目名称 
           1, --可退数量 
           0, --确认数量 
           0, --已确认院注次数 
           v_RecipeNO, --医嘱项目流水号或者体检项目流水号 
           '', --条码号 
           '', --收费序列 
           0, --超标金额 
           0, --药品超标金额 
           0, --自费药金额 
           '0', --费用来源 0 操作员 1 医嘱 2 终端 3 体检 
           '0', --附材标志 
           '0', --0没有扣账户 1 已经扣账户 
           '0', --更新库存的流水号(物资) 
           '' --账户患者消费账号 
           );
      Exception
        WHEN NO_DATA_FOUND THEN
          ErrStr     := '新增fin_opb_feedetail项目明细表失败' || sqlerrm;
          ReturnCode := -1;
          return;
        WHEN OTHERS THEN
          ErrStr     := '新增fin_opb_feedetail项目明细表失败' || sqlerrm;
          ReturnCode := -1;
          return;
      end;
    end loop;
  
    commit;
    ErrStr     := '检查项目预约成功！';
    ReturnCode := 1;
  
    open ResultSet for
      select v_patientinfo.card_no as "CardNo",
             v_clincNo             as "clinicNo",
             v_RecipeNO            as "RecipeNO",
             v_sumCost             as "totalCost"
        from dual;
  
  END PRC_CHECKITEM_APPLY;

  --查询挂号订单
  PROCEDURE PRC_REGORDERQUERY(clinic_code in varchar2,
                              patname     in varchar2,
                              status      in varchar2,
                              doctName    in varchar2,
                              startTime   in varchar2,
                              endTime     in varchar2,
                              ReturnSet   out cc_cursor,
                              ErrorMsg    out varchar2,
                              ReturnCode  out integer) IS
    v_Clinic_Code varchar2(20);
    v_Name        varchar2(30);
    v_Status      varchar2(10);
    v_DoctName    varchar2(30);
    v_startTime   date;
    v_endTime     date;
    v_Page        integer;
    v_pageSize    integer;
  
  begin
  
    if clinic_code = '' or clinic_code is null then
      v_Clinic_Code := 'ALL';
    else
      v_Clinic_Code := clinic_code;
    end if;
    if patname = '' or patname is null then
      v_Name := 'ALL';
    else
      v_Name := patname;
    end if;
    if status = '' or status is null then
      v_Status := 'ALL';
    else
      v_Status := status;
    end if;
    if doctName = '' or doctName is null then
      v_DoctName := 'ALL';
    else
      v_DoctName := doctName;
    end if;
    if startTime = '' or startTime is null then
      v_startTime := sysdate;
    else
      v_startTime := to_date(startTime, 'yyyy-mm-dd hh24:mi:ss');
    end if;
    if endTime = '' or endTime is null then
      v_endTime := sysdate;
    else
      v_endTime := to_date(endTime, 'yyyy-mm-dd hh24:mi:ss');
    end if;
    begin
      open ReturnSet for
        select rownum as "serialNo",
               r.clinic_code as "registerNo",
               r.name as "patientName",
               decode(r.sex_code, 'F', '女', 'M', '男', '其他') as "sex",
               TRUNC(months_between(sysdate, r.birthday) / 12, '0') as "age",
               r.card_no as "cardNo",
               r.idenno as "certNo",
               r.reglevl_name as "registerType",
               to_char(r.reg_date, 'yyyy-mm-dd hh24:mi:ss') as "registerTime",
               decode(r.trans_type, '1', '挂号', '2', '退号', '无') as "registerStatus",
               r.own_cost as "registerFee",
               r.dept_name as "department",
               r.doct_name as "doctorName",
               (select to_char(m.oper_date, 'yyyy-mm-dd hh24:mi:ss')
                  from zjhis.fin_opr_register m
                 where m.clinic_code = r.clinic_code
                   and m.trans_type = '1') as "appointmentTime",
               r.in_source as "patientSource",
               zjhis.fun_get_empl_name((select m.oper_code
                                         from zjhis.fin_opr_register m
                                        where m.clinic_code = r.clinic_code
                                          and m.trans_type = '2')) as "refundOperator",
               (select to_char(m.oper_date, 'yyyy-mm-dd hh24:mi:ss')
                  from zjhis.fin_opr_register m
                 where m.clinic_code = r.clinic_code
                   and m.trans_type = '2') as "refundTime",
               (select m.own_cost
                  from zjhis.fin_opr_register m
                 where m.clinic_code = r.clinic_code
                   and m.trans_type = '2') as "refundFee",
               decode(r.valid_flag,
                      '1',
                      '',
                      '0',
                      decode(r.oper_code, '006688', '微信', 'HIS')) as "refundSource",
               '' as "RefundRemake"
          from fin_opr_register r
         where (r.clinic_code = v_Clinic_Code or 'ALL' = v_Clinic_Code)
           and (R.NAME = v_Name or 'ALL' = v_Name)
           and (r.trans_type = v_Status or 'ALL' = v_Status)
           and (r.doct_name = v_DoctName or 'ALL' = v_DoctName)
           and r.oper_date >= trunc(v_startTime)
           and r.oper_date < trunc(v_endTime) + 1
           and (r.valid_flag = decode(v_Status, '1', '1', '2', '0') or
               'ALL' = v_Status)
           and r.oper_code = '006688'
         order by r.oper_date desc;
    exception
      when others then
        ErrorMsg   := '挂号订单查询失败！' || sqlerrm;
        ReturnCode := -1;
        return;
    end;
    ErrorMsg   := '查询成功！';
    ReturnCode := 1;
  end PRC_REGORDERQUERY;

  --1 是 出诊变更根据医生查询挂号患者信息dto
  --2 是 出诊变更根据医生查询挂号患者信息vo
  procedure PRC_REGISTERCHANGQUERY(DoctID     IN VARCHAR2,
                                   schemaTime IN VARCHAR2,
                                   Phone      in varchar2,
                                   NOONCODE   IN varchar2,
                                   DEPTID     IN VARCHAR2,
                                   TRANSTYPE  IN varchar2,
                                   bizType    in varchar2,
                                   ResultSet  out cc_cursor,
                                   ReturnCode out integer,
                                   ErrorMsg   out VARCHAR2) is
    v_DoctId     varchar2(10);
    v_Deptid     varchar2(10);
    v_noonCode   varchar2(2);
    v_schemaTime date;
    v_TransType  varchar2(10);
    v_count      integer;
    v_starttime  date;
    v_endtime    date;
    v_schemaNo   varchar2(20);
  begin
  
    if bizType = '1' then
      /*
      if page is null then
        ErrorMsg   := '该接口需要分页请输入page参数！！';
        ReturnCode := -1;
        return;
      end if;
      if pageSize is null then
        ErrorMsg   := '该接口需要分页请输入pageSize参数！！';
        ReturnCode := -1;
        return;
      end if;*/
      open ResultSet for
        select b.doct_name "doctorName",
               b.doct_code "doctorId",
               (select name
                  from com_dictionary
                 where code = (select e.POSI_CODE
                                 from com_employee e
                                where e.empl_code = b.doct_code)
                   and type = 'POSITION') "title",
               (select name
                  from com_dictionary
                 where code = (select e.levl_code
                                 from com_employee e
                                where e.empl_code = b.doct_code)
                   and type = 'LEVEL') "major",
               fun_get_dept_name(b.dept_code) "deptName",
               b.dept_code "deptId",
               '' "appraise",
               '' "goodAt",
               '' "userPhoto",
               '' "subHospitalID",
               b.id "scheduleId",
               to_char(b.see_date, 'yyyy-mm-dd') "outpDate",
               b.noon_code "timeInterval",
               '' "level",
               (select d.DEPT_ADDRESS
                  from COM_DEPARTMENT d
                 where d.DEPT_CODE = b.DEPT_CODE) "location",
               '' "sectionType",
               '' "doctorDes",
               b.REGLEVL_CODE "clinicTypeId",
               b.REGLEVL_NAME "clinicTypeName",
               (select a.CHCK_FEE + a.DIAG_FEE
                  from FIN_OPR_REGFEEONPACT a
                 where a.PACT_CODE = '01'
                   and a.REGLEVL_CODE = b.REGLEVL_CODE) "clinicFee", --诊查费
               (select a.REG_FEE
                  from FIN_OPR_REGFEEONPACT a
                 where a.PACT_CODE = '01'
                   and a.REGLEVL_CODE = b.REGLEVL_CODE) "registrationFee", --挂号费
               to_char(b.reg_lmt) "registrationLimit", --限号数
               to_char(b.tel_lmt) "reserveLimit", --限预约号数
               to_char(b.reged) "registrationNum", --已挂数
               to_char(b.tel_reging) "reserveNum", --已约数
               decode(b.valid_flag, '0', '-1', '1') "validFlag", --停号标志 -1 停诊 0 未发布 1正常
               '' "stopFlag", --停诊类别1 停诊后有替诊医生 2 停诊后无替诊医生
               b.reason_name "stopReason", --停诊原因
               '' "doctorCode2", --替诊医生
               '' "doctorCodeName2", --替诊医生名称
               (select count(*)
                  from fin_opr_register_pool a
                 where a.SCHEMA_ID = b.id
                   and a.begin_time >= sysdate /*where c.SEE_DATE = to_char(DocTime, 'yyyy-mm-dd'))*/
                   and a.POOLNO_TYPE = '1'
                   and a.STATUS = '1') "PreCount"
          from fin_opr_schema b
         where b.valid_flag = '0'
           and b.see_date >= trunc(sysdate)
           and b.see_date < trunc(sysdate) + 5;
    elsif bizType = '3' then
      if DoctID = '' or DoctID is null then
        ErrorMsg   := '排班id不得为空！！';
        ReturnCode := -1;
        return;
      else
        v_schemaNo := DoctID;
      end if;
      open ResultSet for
        select r.invoice_no as "hisOrderNo",
               r.name as "patientName",
               r.dept_name as "deptName",
               r.doct_name as "doctorName",
               r.reglevl_name as "clinicType",
               to_char(r.reg_date, 'yyyy-mm-dd hh24:mi:ss') as "appointmentTime",
               r.rela_phone as "phone",
               decode(r.oper_code, '006688', '1', '2') as "registeredSourceType"
          from fin_opr_register r
         where r.schema_no = v_schemaNo;
    elsif bizType = '2' then
      if DoctID = '' or DoctID is null then
        ErrorMsg   := '医生id不得为空！！';
        ReturnCode := -1;
        return;
      end if;
      /*
      if Phone = '' or Phone is null then
        ErrorMsg   := '电话不得为空！！';
        ReturnCode := -1;
        return;
      end if;*/
    
      if schemaTime = '' or schemaTime is null then
        ErrorMsg   := '排班时间不得为空！！';
        ReturnCode := -1;
        return;
      else
        v_schemaTime := to_date(schemaTime, 'yyyy-mm-dd');
      end if;
    
      if NOONCODE = '' or NOONCODE is null then
        ErrorMsg   := '排班午别不得为空！！';
        ReturnCode := -1;
        return;
      end if;
    
      if DEPTID = '' or DEPTID is null then
        v_Deptid := 'ALL';
      else
        v_Deptid := DEPTID;
      end if;
    
      if TRANSTYPE = '' or TRANSTYPE is null then
        ErrorMsg   := '挂号状态不得为空！！';
        ReturnCode := -1;
        return;
      end if;
    
      if bizType = '' or bizType is null then
        ErrorMsg   := '业务id不得为空！！';
        ReturnCode := -1;
        return;
      end if;
      open ResultSet for
        select rownum as "id",
               r.invoice_no as "orderNo",
               r.name as "patientName",
               decode(r.sex_code, 'F', '女', 'M', '男', '其他') as "sex",
               EXTRACT(year FROM sysdate) - EXTRACT(year FROM r.birthday) as "age",
               r.card_no as "cardNo",
               r.idenno as "idCardNo",
               r.rela_phone as "phone",
               r.reglevl_name as "clinic_type",
               decode(r.valid_flag, '1', '正常', '0', '退号') as "registerState",
               (r.reg_fee + r.diag_fee + r.chck_fee) as "registerFee",
               r.dept_name as "department",
               r.doct_name as "doctorName",
               to_char(r.reg_date, 'yyyy-mm-dd hh24:mi:ss') as "appointmentTime",
               decode(r.noon_code, '1', '上午', '2', '下午', '3', '晚上') as "timeFrame",
               decode(r.oper_code, '006688', '智慧医院', '自行前往') as "patientSourceType",
               
               (select m.oper_code
                  from fin_opr_register m
                 where m.clinic_code = r.clinic_code
                   and m.trans_type = '2') as "Operator",
               (select to_char(m.oper_date, 'yyyy-mm-dd hh24:mi:ss')
                  from fin_opr_register m
                 where m.clinic_code = r.clinic_code
                   and m.trans_type = '2') as "refundTime",
               (select decode(m.oper_code, '006688', '微信', '现场')
                  from fin_opr_register m
                 where m.clinic_code = r.clinic_code
                   and m.trans_type = '2') as "refundFeeSourceType",
               (select m.reg_fee + m.diag_fee + m.chck_fee
                  from fin_opr_register m
                 where m.clinic_code = r.clinic_code
                   and m.trans_type = '2') as "refundFee",
               '' as "remark"
          from fin_opr_register r
         where r.doct_code = DoctID
           and r.noon_code = NOONCODE
           and (r.dept_code = v_Deptid or 'ALL' = v_Deptid)
           and r.valid_flag = TRANSTYPE
           and r.reg_date >= to_date(schemaTime, 'yyyy-mm-dd')
           and r.reg_date < to_date(schemaTime, 'yyyy-mm-dd') + 1;
    end if;
    ReturnCode := 1;
    ErrorMsg   := '查询成功！';
  
  end PRC_REGISTERCHANGQUERY;

  --根据条件获取医生列表 1 是根据医生id查 排班  2是根据排班查号源
  PROCEDURE PRC_OutpDoctorQueryByDoc(doctId     IN VARCHAR2,
                                     bizType    in varchar2,
                                     Docdate    in varchar2,
                                     ResultSet  out cc_cursor,
                                     ReturnCode out integer,
                                     ErrorMsg   out VARCHAR2) is
    DoctCode varchar2(20);
    DocTime  date;
  begin
  
    if doctId is null or doctId = '' then
      DoctCode := 'ALL';
    else
      DoctCode := doctId;
    end if;
  
    if bizType = '1' then
      open ResultSet for
        select b.doct_name "doctorName",
               b.doct_code "doctorId",
               (select name
                  from com_dictionary
                 where code = (select e.POSI_CODE
                                 from com_employee e
                                where e.empl_code = b.doct_code)
                   and type = 'POSITION') "title",
               (select name
                  from com_dictionary
                 where code = (select e.levl_code
                                 from com_employee e
                                where e.empl_code = b.doct_code)
                   and type = 'LEVEL') "major",
               fun_get_dept_name(b.dept_code) "deptName",
               b.dept_code "deptId",
               '' "appraise",
               '' "goodAt",
               '' "userPhoto",
               '' "subHospitalID",
               b.id "scheduleId",
               to_char(b.see_date, 'yyyy-mm-dd') "outpDate",
               b.noon_code "timeInterval",
               '' "level",
               (select d.DEPT_ADDRESS
                  from COM_DEPARTMENT d
                 where d.DEPT_CODE = b.DEPT_CODE) "location",
               '' "sectionType",
               '' "doctorDes",
               b.REGLEVL_CODE "clinicTypeId",
               b.REGLEVL_NAME "clinicTypeName",
               (select a.CHCK_FEE + a.DIAG_FEE
                  from FIN_OPR_REGFEEONPACT a
                 where a.PACT_CODE = '01'
                   and a.REGLEVL_CODE = b.REGLEVL_CODE) "clinicFee", --诊查费
               (select a.REG_FEE
                  from FIN_OPR_REGFEEONPACT a
                 where a.PACT_CODE = '01'
                   and a.REGLEVL_CODE = b.REGLEVL_CODE) "registrationFee", --挂号费
               to_char(b.reg_lmt) "registrationLimit", --限号数
               to_char(b.tel_lmt) "reserveLimit", --限预约号数
               to_char(b.reged) "registrationNum", --已挂数
               to_char(b.tel_reging) "reserveNum", --已约数
               b.valid_flag "validFlag", --停号标志 -1 停诊 0 未发布 1正常
               '' "stopFlag", --停诊类别1 停诊后有替诊医生 2 停诊后无替诊医生
               b.reason_name "stopReason", --停诊原因
               '' "doctorCode2", --替诊医生
               '' "doctorCodeName2", --替诊医生名称
               (select count(*)
                  from fin_opr_register_pool a
                 where a.SCHEMA_ID = b.id
                   and a.begin_time >= sysdate /*where c.SEE_DATE = to_char(DocTime, 'yyyy-mm-dd'))*/
                   and a.POOLNO_TYPE = '1'
                   and a.STATUS = '1') "PreCount"
          from fin_opr_schema b
         where (b.doct_code = DoctCode or 'ALL' = DoctCode)
           and b.valid_flag = '1'
           and b.see_date >= trunc(sysdate)
           and b.see_date < trunc(sysdate) + 16;
    
    else
      open ResultSet for
        select '您输入的bizType无效' as "msg" from dual;
    end if;
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  end PRC_OutpDoctorQueryByDoc;

  --缴费查询
  PROCEDURE PRC_GetHosItemListByDoc(recipeNo    in varchar2,
                                    patientName in varchar2,
                                    Status      in varchar2,
                                    doctorName  in varchar2,
                                    startTime   in varchar2,
                                    endTime     in varchar2,
                                    ResultSet   out cc_cursor,
                                    ErrorMsg    out varchar2,
                                    ReturnCode  out integer) is
    v_recipeNo    varchar2(20);
    v_patientName varchar2(50);
    v_Status      varchar2(10);
    v_DoctorName  varchar2(50);
    v_StartTime   date;
    v_EndTime     date;
  begin
  
    if recipeNo = '' or recipeNo is null then
      v_recipeNo := 'ALL';
    else
      v_recipeNo := recipeNo;
    end if;
  
    if patientName = '' or patientName is null then
      v_patientName := 'ALL';
    else
      v_patientName := patientName;
    end if;
  
    if Status = '' or Status is null then
      v_Status := 'ALL';
    else
      v_Status := Status;
    end if;
  
    if doctorName = '' or doctorName is null then
      v_DoctorName := 'ALL';
    else
      v_DoctorName := doctorName;
    end if;
  
    if startTime = '' or startTime is null then
      v_StartTime := sysdate;
    else
      v_StartTime := to_date(startTime, 'yyyy-mm-dd hh24:mi:ss');
    end if;
  
    if endTime = '' or endTime is null then
      v_EndTime := sysdate + 1;
    else
      v_EndTime := to_date(endTime, 'yyyy-mm-dd hh24:mi:ss');
    end if;
  
    begin
      open ResultSet for
        select rownum as "serialNo",
               f.recipe_no as "prescriptNo",
               f.oper_date as "isusingTime",
               f.clinic_code as "outpatientNum",
               (select p.name
                  from com_patientinfo p
                 where p.card_no = f.card_no) as "patientName",
               (select decode(p.sex_code, 'F', '女', 'M', '男', '其他')
                  from com_patientinfo p
                 where p.card_no = f.card_no) as "sex",
               (select TRUNC(months_between(sysdate, p.birthday) / 12, '0')
                  from com_patientinfo p
                 where p.card_no = f.card_no) as "age",
               f.card_no as "cardNo",
               (select p.idenno
                  from com_patientinfo p
                 where p.card_no = f.card_no) as "certNo",
               zjhis.fun_get_dept_name(f.reg_dpcd) as "department",
               zjhis.fun_get_empl_name(f.doct_code) as "doctorName",
               f.own_cost as "prescriptionFee",
               decode(f.pay_flag, '1', '已缴费', '0', '未缴费') as "payStatus",
               f.fee_date as "payTime"
          from fin_opb_feedetail f
         where (f.recipe_no = v_recipeNo or 'ALL' = v_recipeNo)
           and (f.card_no in
               (select p.card_no
                   from com_patientinfo p
                  where p.name like '%' || v_patientName || '%') or
               'ALL' = v_patientName)
           and (f.pay_flag = v_Status or 'ALL' = v_Status)
           and (zjhis.fun_get_empl_name(f.doct_code) like
               '%' || v_DoctorName || '%' or 'ALL' = v_DoctorName)
           and f.fee_date >= trunc(v_StartTime)
           and f.fee_date < trunc(v_EndTime) + 1
           and f.fee_cpcd = '006688'
         order by f.fee_date desc;
    exception
      when others then
        ErrorMsg   := '查询缴费信息失败！' || sqlerrm;
        ReturnCode := -1;
        return;
    end;
    ErrorMsg   := '查询成功！';
    ReturnCode := 1;
  end PRC_GetHosItemListByDoc;

  --缴费明细查询
  PROCEDURE PRC_GetHosItemDetail(OrderNo    in varchar2,
                                 ResultSet  out cc_cursor,
                                 ErrorMsg   out varchar2,
                                 ReturnCode out integer) is
  
    v_OrderNO varchar2(20);
  begin
    if OrderNo = '' or OrderNo is null then
      ReturnCode := -1;
      ErrorMsg   := '门诊缴费订单号不得为空';
      return;
    else
      v_OrderNO := OrderNo;
    end if;
    --查询
    begin
      open ResultSet for
        select f.sequence_no as "serialNo",
               f.item_name   as "projectName",
               f.unit_price  as "projectUnitPrice",
               f.price_unit  as "company",
               f.own_cost    as "amountMoney"
          from fin_opb_feedetail f
         where f.recipe_no = v_OrderNO;
    exception
      when others then
        ErrorMsg   := '查询门诊缴费明细失败' || sqlerrm;
        ReturnCode := -1;
        return;
    end;
    ErrorMsg   := '查询成功！';
    ReturnCode := 1;
  end PRC_GetHosItemDetail;

  --收入金额订单数量接口
  PROCEDURE PRC_GetTotal(beginDate  in varchar2,
                         endDate    in varchar2,
                         ReturnSet  out cc_cursor,
                         ErrorMsg   out varchar2,
                         ReturnCode out integer) is
    v_BeginDate date;
    v_EndDate   date;
  begin
    --开始时间
    if beginDate = '' or beginDate is null then
      ReturnCode := -1;
      ErrorMsg   := '开始时间不得为空！';
      return;
    else
      v_BeginDate := to_date(beginDate, 'yyyy-mm-dd hh24:mi:ss');
    end if;
    --结束时间
    if endDate = '' or beginDate is null then
      ReturnCode := -1;
      ErrorMsg   := '结束时间不得为空！';
      return;
    else
      v_EndDate := to_date(endDate, 'yyyy-mm-dd hh24:mi:ss');
    end if;
    open ReturnSet for
      select ((select sum(r.reg_fee + r.diag_fee + r.chck_fee)
                 from fin_opr_register r
                where r.oper_code = '006688'
                  and r.oper_date >= v_BeginDate
                  and r.oper_date < trunc(v_EndDate) + 1
                  and r.valid_flag = '1') +
             (select sum(f.own_cost)
                 from fin_opb_feedetail f
                where f.pay_flag = '1'
                  and f.fee_date >= v_BeginDate
                  and f.fee_date < trunc(v_EndDate) + 1
                  and f.fee_cpcd = '006688') +
             (select nvl(sum(i.PREPAY_COST), 0)
                 from zjhis.fin_ipb_inprepay i
                where i.BALANCE_STATE = '1'
                  and i.PREPAY_STATE = '0'
                  and i.balance_opercode = '006688'
                  and i.oper_date >= v_BeginDate
                  and i.oper_date < trunc(v_EndDate) + 1)) as "sumMoney",
             ((select count(*)
                 from fin_opr_register r
                where r.oper_code = '006688'
                  and r.oper_date >= v_BeginDate
                  and r.oper_date < trunc(v_EndDate) + 1
                  and r.valid_flag = '1') +
             (select count(*)
                 from fin_opb_feedetail f
                where f.pay_flag = '1'
                  and f.fee_date >= v_BeginDate
                  and f.fee_date < trunc(v_EndDate) + 1
                  and f.fee_cpcd = '006688') +
             (select count(*)
                 from zjhis.fin_ipb_inprepay i
                where i.BALANCE_STATE = '1'
                  and i.PREPAY_STATE = '0'
                  and i.balance_opercode = '006688'
                  and i.oper_date >= v_BeginDate
                  and i.oper_date < trunc(v_EndDate) + 1)) as "orderNum"
        from dual;
    ErrorMsg   := '查询成功！';
    ReturnCode := 1;
  end PRC_GetTotal;

  --交易金额走势图接口
  PROCEDURE PRC_GetTotalByDate(SelType    in integer, --(1代表查询本月,2代表查询今年)
                               ReturnSet  out cc_cursor,
                               ErrorMsg   out varchar2,
                               ReturnCode out integer) is
    v_SelType integer;
  begin
    if SelType = '' or SelType is null then
      ErrorMsg   := 'SelType字段不得为空！';
      ReturnCode := -1;
      return;
    else
      v_SelType := SelType;
    end if;
  
    if v_SelType = 1 then
      open ReturnSet for
        select kk."date" as "dayAndMonth",
               sum(nvl(kk."cost", 0)) as "amountMoney"
          from (select to_char(r.oper_date, 'mm-dd') as "date",
                       sum(r.reg_fee + r.chck_fee + r.diag_fee) as "cost"
                  from fin_opr_register r
                 where r.oper_date >=
                       to_date(to_char(sysdate, 'yyyy-mm') || '-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and r.oper_code = '006688'
                 group by to_char(r.oper_date, 'mm-dd')
                union all
                select to_char(f.fee_date, 'mm-dd') as "date",
                       sum(f.own_cost) as "cost"
                  from fin_opb_feedetail f
                 where f.fee_date >=
                       to_date(to_char(sysdate, 'yyyy-mm') || '-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and f.fee_cpcd = '006688'
                 group by to_char(f.fee_date, 'mm-dd')
                union all
                
                select to_char(i.oper_date, 'mm-dd') as "date",
                       nvl(sum(i.prepay_cost), 0) as "cost"
                  from zjhis.fin_ipb_inprepay i
                 where i.BALANCE_STATE = '1'
                   and i.PREPAY_STATE = '0'
                   and i.balance_opercode = '006688'
                   and i.oper_date >=
                       to_date(to_char(sysdate, 'yyyy-mm') || '-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                 group by to_char(i.oper_date, 'mm-dd')) kk
        
         group by kk."date"
         order by kk."date" asc;
    elsif v_SelType = 2 then
      open ReturnSet for
        select kk."date" as "dayAndMonth",
               sum(nvl(kk."cost", 0)) as "amountMoney"
          from (select to_char(r.oper_date, 'mm') as "date",
                       sum(r.reg_fee + r.chck_fee + r.diag_fee) as "cost"
                  from fin_opr_register r
                 where r.oper_date >=
                       to_date(to_char(sysdate, 'yyyy') || '-01-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and r.oper_code = '006688'
                 group by to_char(r.oper_date, 'mm')
                union all
                select to_char(f.fee_date, 'mm') as "date",
                       sum(f.own_cost) as "cost"
                  from fin_opb_feedetail f
                 where f.fee_date >=
                       to_date(to_char(sysdate, 'yyyy') || '-01-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and f.fee_cpcd = '006688'
                 group by to_char(f.fee_date, 'mm')
                union all
                select to_char(i.oper_date, 'mm') as "date",
                       nvl(sum(i.prepay_cost), 0) as "cost"
                  from zjhis.fin_ipb_inprepay i
                 where i.BALANCE_STATE = '1'
                   and i.PREPAY_STATE = '0'
                   and i.balance_opercode = '006688'
                   and i.oper_date >=
                       to_date(to_char(sysdate, 'yyyy') || '-01-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                 group by to_char(i.oper_date, 'mm')) kk
        
         group by kk."date"
         order by kk."date" asc;
    
      /* select to_char(r.oper_date, 'mm'),
            sum(r.reg_fee + r.chck_fee + r.diag_fee)
       from fin_opr_register r
      where r.oper_date >=
            to_date(to_char(sysdate, 'yyyy') || '-01-01', 'yyyy-mm-dd')
        and r.oper_code = '006688'
      group by to_char(r.oper_date, 'mm')
      order by to_char(r.oper_date, 'mm') asc;*/
    
    end if;
    ErrorMsg   := '查询成功！';
    ReturnCode := 1;
  end PRC_GetTotalByDate;

  --各业务交易金额接口
  PROCEDURE PRC_GetTotalByType(SelType    in integer, --(1代表查询本月,2代表查询今年)
                               ReturnSet  out cc_cursor,
                               ErrorMsg   out varchar2,
                               ReturnCode out integer) is
  
    v_SelType integer;
  begin
  
    if SelType = '' or SelType is null then
      ErrorMsg   := 'SelType字段不得为空！';
      ReturnCode := -1;
      return;
    else
      v_SelType := SelType;
    end if;
  
    if v_SelType = 1 then
      open ReturnSet for
        select '门诊挂号' as "businessName",
               (select sum(r.reg_fee + r.chck_fee + r.diag_fee)
                  from fin_opr_register r
                 where r.oper_date >=
                       to_date(to_char(sysdate, 'yyyy-mm') || '-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and r.oper_code = '006688') as "amountMoney"
          from dual
        union all
        select '门诊缴费' as "businessName",
               (select sum(f.own_cost) as "cost"
                  from fin_opb_feedetail f
                 where f.fee_date >=
                       to_date(to_char(sysdate, 'yyyy-mm') || '-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and f.fee_cpcd = '006688') as "amountMoney"
          from dual
        union all
        select '住院预交金' as "businessName",
               (select nvl(sum(i.prepay_cost), 0)
                  from zjhis.fin_ipb_inprepay i
                 where i.oper_date >=
                       to_date(to_char(sysdate, 'yyyy-mm') || '-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and i.oper_code = '006688') as "amountMoney"
          from dual;
    elsif v_SelType = 2 then
      open ReturnSet for
        select '门诊挂号' as "businessName",
               (select sum(r.reg_fee + r.chck_fee + r.diag_fee)
                  from fin_opr_register r
                 where r.oper_date >=
                       to_date(to_char(sysdate, 'yyyy') || '-01-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and r.oper_code = '006688') as "amountMoney"
          from dual
        union all
        select '门诊缴费' as "businessName",
               (select sum(f.own_cost) as "cost"
                  from fin_opb_feedetail f
                 where f.fee_date >=
                       to_date(to_char(sysdate, 'yyyy') || '-01-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and f.fee_cpcd = '006688') as "amountMoney"
          from dual
        union all
        select '住院预交金' as "businessName",
               (select nvl(sum(i.prepay_cost), 0)
                  from zjhis.fin_ipb_inprepay i
                 where i.oper_date >=
                       to_date(to_char(sysdate, 'yyyy') || '-01-01 00:00:00',
                               'yyyy-mm-dd hh24:mi:ss')
                   and i.oper_code = '006688') as "amountMoney"
          from dual;
    end if;
  
    ErrorMsg   := '查询成功！';
    ReturnCode := 1;
  end PRC_GetTotalByType;

  --HIS账单接口(查询当天日期的前一天数据)------  备注:我们这边每天凌晨1点用定时任务刷数据
  PROCEDURE PRC_GetyesterdayTotal(ReturnSet  out cc_cursor,
                                  ErrorMsg   out varchar2,
                                  ReturnCode out integer) is
  
  begin
    begin
      open ReturnSet for
      
        select to_char(sysdate - 1, 'yyyy-mm-dd') as "billTime",
               'HIS' as "reconciliationSquare",
               ((select count(*)
                   from fin_opr_register r
                  where r.oper_date >= trunc(sysdate - 1)
                    and r.oper_date < trunc(sysdate)
                    and r.oper_code = '006688'
                       -- and r.trans_type='1'
                    and r.valid_flag = '1') +
               (select count(*)
                   from fin_opb_feedetail f
                  where f.fee_date >= trunc(sysdate - 1)
                    and f.fee_date < trunc(sysdate)
                    and f.fee_cpcd = '006688'
                       --   and f.trans_type='1'
                    and f.pay_flag = '1') +
               (select count(*)
                   from zjhis.fin_ipb_inprepay i
                  where i.oper_date >= trunc(sysdate - 1)
                    and i.oper_date < trunc(sysdate)
                    and i.oper_code = '006688'
                       --and i.prepay_cost>0
                    and i.balance_state = '1')) as "documentsNum",
               ((select count(*)
                   from fin_opr_register r
                  where r.oper_date >= trunc(sysdate - 1)
                    and r.oper_date < trunc(sysdate)
                    and r.oper_code = '006688'
                    and r.trans_type = '1'
                    and r.valid_flag = '1') +
               (select count(*)
                   from fin_opb_feedetail f
                  where f.fee_date >= trunc(sysdate - 1)
                    and f.fee_date < trunc(sysdate)
                    and f.fee_cpcd = '006688'
                    and f.trans_type = '1'
                    and f.pay_flag = '1') +
               (select count(*)
                   from zjhis.fin_ipb_inprepay i
                  where i.oper_date >= trunc(sysdate - 1)
                    and i.oper_date < trunc(sysdate)
                    and i.oper_code = '006688'
                    and i.prepay_cost > 0
                    and i.balance_state = '1')) as "paymentNum",
               ((select sum(r.reg_fee + r.chck_fee + r.diag_fee)
                   from fin_opr_register r
                  where r.oper_date >= trunc(sysdate - 1)
                    and r.oper_date < trunc(sysdate)
                    and r.oper_code = '006688'
                    and r.trans_type = '1'
                    and r.valid_flag = '1') +
               (select sum(f.own_cost)
                   from fin_opb_feedetail f
                  where f.fee_date >= trunc(sysdate - 1)
                    and f.fee_date < trunc(sysdate)
                    and f.fee_cpcd = '006688'
                    and f.trans_type = '1'
                    and f.pay_flag = '1') +
               (select nvl(sum(i.prepay_cost), 0)
                   from zjhis.fin_ipb_inprepay i
                  where i.oper_date >= trunc(sysdate - 1)
                    and i.oper_date < trunc(sysdate)
                    and i.oper_code = '006688'
                    and i.prepay_cost > 0
                    and i.balance_state = '1')) as "paymentAmount",
               ((select count(*)
                   from fin_opr_register r
                  where r.oper_date >= trunc(sysdate - 1)
                    and r.oper_date < trunc(sysdate)
                    and r.oper_code = '006688'
                    and r.trans_type = '2'
                    and r.valid_flag = '1') +
               (select count(*)
                   from fin_opb_feedetail f
                  where f.fee_date >= trunc(sysdate - 1)
                    and f.fee_date < trunc(sysdate)
                    and f.fee_cpcd = '006688'
                    and f.trans_type = '2'
                    and f.pay_flag = '1') +
               (select count(*)
                   from zjhis.fin_ipb_inprepay i
                  where i.oper_date >= trunc(sysdate - 1)
                    and i.oper_date < trunc(sysdate)
                    and i.oper_code = '006688'
                    and i.prepay_cost < 0
                    and i.balance_state = '1')) as "refundNum",
               ((select sum(r.reg_fee + r.chck_fee + r.diag_fee)
                   from fin_opr_register r
                  where r.oper_date >= trunc(sysdate - 1)
                    and r.oper_date < trunc(sysdate)
                    and r.oper_code = '006688'
                    and r.trans_type = '2'
                    and r.valid_flag = '1') +
               (select sum(f.own_cost)
                   from fin_opb_feedetail f
                  where f.fee_date >= trunc(sysdate - 1)
                    and f.fee_date < trunc(sysdate)
                    and f.fee_cpcd = '006688'
                    and f.trans_type = '2'
                    and f.pay_flag = '1') +
               (select nvl(sum(i.prepay_cost), 0)
                   from zjhis.fin_ipb_inprepay i
                  where i.oper_date >= trunc(sysdate - 1)
                    and i.oper_date < trunc(sysdate)
                    and i.oper_code = '006688'
                    and i.prepay_cost < 0
                    and i.balance_state = '1')) as "refundAmount",
               ((select sum(r.own_cost)
                   from fin_opr_register r
                  where r.oper_date >= trunc(sysdate - 1)
                    and r.oper_date < trunc(sysdate)
                    and r.oper_code = '006688'
                       --and r.trans_type = '1'
                    and r.valid_flag = '1') +
               (select sum(f.own_cost)
                   from fin_opb_feedetail f
                  where f.fee_date >= trunc(sysdate - 1)
                    and f.fee_date < trunc(sysdate)
                    and f.fee_cpcd = '006688'
                       --and f.trans_type = '1'
                    and f.pay_flag = '1') +
               (select nvl(sum(i.prepay_cost), 0)
                   from zjhis.fin_ipb_inprepay i
                  where i.oper_date >= trunc(sysdate - 1)
                    and i.oper_date < trunc(sysdate)
                    and i.oper_code = '006688'
                       --and i.prepay_cost<0
                    and i.balance_state = '1')) as "receivableAmount",
               '正常' as "reconciliationResults",
               '未核对' as "checkStatus"
          from dual;
    Exception
      when others then
        ErrorMsg   := '查询出现问题' || sqlerrm;
        ReturnCode := -1;
    end;
    ErrorMsg   := '查询成功！';
    ReturnCode := 1;
  end PRC_GetyesterdayTotal;

  --对账账单下载的接口  biztype 1 查询对账账单详细信息
  procedure PRC_GETTOTALBYDateNew(TotalDate  in varchar2,
                                  bizType    in varchar2,
                                  Page       in integer,
                                  pageSize   in integer,
                                  ResultSet  out cc_cursor,
                                  ReturnCode out integer,
                                  ErrorMsg   out varchar2) is
    v_TotalDate date;
  begin
    if TotalDate = '' or TotalDate is null then
      v_TotalDate := sysdate;
    else
      v_TotalDate := to_date(TotalDate, 'yyyy-mm-dd');
    end if;
  
    if bizType = '1' then
      open ResultSet for
        select --rownum                    as "index",
         bb."billTime"             as "billTime",
         bb."reconciliationSquare" as "reconciliationSquare",
         bb."billType"             as "billType",
         bb."hisNo"                as "hisNo",
         bb."platfromNo"           as "platfromNo",
         bb."payAmount"            as "payAmount",
         bb."payStatus"            as "payStatus",
         bb."payTime"              as "payTime"
        
          from (select aa."billTime"             as "billTime",
                       aa."reconciliationSquare" as "reconciliationSquare",
                       aa."billType"             as "billType",
                       aa."hisNo"                as "hisNo",
                       aa."platfromNo"           as "platfromNo",
                       aa."payAmount"            as "payAmount",
                       aa."payStatus"            as "payStatus",
                       aa."payTime"              as "payTime"
                  from (select TotalDate as "billTime",
                               decode(r.oper_code,
                                      '006688',
                                      '智慧医院',
                                      'HIS') as "reconciliationSquare",
                               '门诊挂号' as "billType",
                               r.invoice_no as "hisNo",
                               r.net_cardno as "platfromNo",
                               (r.pub_cost + r.pay_cost + r.own_cost) as "payAmount",
                               decode(r.trans_type, '1', '成功', '2', '退款') as "payStatus",
                               to_char(r.oper_date, 'yyyy-mm-dd hh24:mi:ss') as "payTime"
                          from fin_opr_register r
                         where r.oper_date >= trunc(v_TotalDate)
                           and r.oper_date < trunc(v_TotalDate) + 1
                           and (r.pub_cost + r.pay_cost + r.own_cost) <> 0
                           and r.oper_code = '006688'
                        union all
                        select TotalDate as "billTime",
                               decode(f.oper_code,
                                      '006688',
                                      '智慧医院',
                                      'HIS') as "reconciliationSquare",
                               '门诊缴费' as "billType",
                               f.invoice_no as "hisNo",
                               f.pos_no as "platfromNo",
                               f.tot_cost as "payAmount",
                               decode(f.trans_type, '1', '成功', '2', '退款') as "payStatus",
                               to_char(f.oper_date, 'yyyy-mm-dd hh24:mi:ss') as "payTime"
                          from fin_opb_paymode f
                         where f.oper_date >= trunc(v_TotalDate)
                           and f.oper_date < trunc(v_TotalDate) + 1
                           and f.oper_code = '006688'
                        union all
                        select TotalDate as "billTime",
                               decode(p.oper_code,
                                      '006688',
                                      '智慧医院',
                                      'HIS') as "reconciliationSquare",
                               '住院预交金' as "billType",
                               p.receipt_no as "hisNo",
                               p.postrans_no as "platfromNo",
                               p.prepay_cost as "payAmount",
                               decode(p.prepay_state, '0', '成功', '退款') as "payStatus",
                               to_char(p.oper_date, 'yyyy-mm-dd hh24:mi:ss') as "payTime"
                          from fin_ipb_inprepay p
                         where p.oper_date >= trunc(v_TotalDate)
                           and p.oper_date < trunc(v_TotalDate) + 1
                           and p.oper_code = '006688') aa
                
                 order by aa."billType" desc) bb;
      /*
                      
      where cc."index" between (Page - 1) * pageSize + 1 and
            Page * pageSize;
            */
    end if;
    ReturnCode := 1;
    ErrorMsg   := '查询成功!';
  end PRC_GETTOTALBYDateNew;

END PKG_ZHYY_MZ;
